
00_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08005de4  08005de4  00006de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e74  08005e74  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005e74  08005e74  00006e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e7c  08005e7c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e7c  08005e7c  00006e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e80  08005e80  00006e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005e84  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a00  20000010  08005e94  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a10  08005e94  00007a10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019dc3  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039df  00000000  00000000  00020e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  000247e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ca  00000000  00000000  00025ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022833  00000000  00000000  000270aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8a4  00000000  00000000  000498dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3627  00000000  00000000  00064181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001377a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fcc  00000000  00000000  001377ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003f  00000000  00000000  0013d7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dcc 	.word	0x08005dcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005dcc 	.word	0x08005dcc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004c4:	4a04      	ldr	r2, [pc, #16]	@ (80004d8 <MX_FREERTOS_Init+0x18>)
 80004c6:	2100      	movs	r1, #0
 80004c8:	4804      	ldr	r0, [pc, #16]	@ (80004dc <MX_FREERTOS_Init+0x1c>)
 80004ca:	f002 ff0d 	bl	80032e8 <osThreadNew>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4a03      	ldr	r2, [pc, #12]	@ (80004e0 <MX_FREERTOS_Init+0x20>)
 80004d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	08005e08 	.word	0x08005e08
 80004dc:	080004e5 	.word	0x080004e5
 80004e0:	2000002c 	.word	0x2000002c

080004e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f002 ff8d 	bl	800340c <osDelay>
 80004f2:	e7fb      	b.n	80004ec <StartDefaultTask+0x8>

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4b1d      	ldr	r3, [pc, #116]	@ (8000580 <MX_GPIO_Init+0x8c>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	4a1c      	ldr	r2, [pc, #112]	@ (8000580 <MX_GPIO_Init+0x8c>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000516:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <MX_GPIO_Init+0x8c>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <MX_GPIO_Init+0x8c>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a16      	ldr	r2, [pc, #88]	@ (8000580 <MX_GPIO_Init+0x8c>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <MX_GPIO_Init+0x8c>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <MX_GPIO_Init+0x8c>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a10      	ldr	r2, [pc, #64]	@ (8000580 <MX_GPIO_Init+0x8c>)
 8000540:	f043 0302 	orr.w	r3, r3, #2
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <MX_GPIO_Init+0x8c>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0302 	and.w	r3, r3, #2
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2108      	movs	r1, #8
 8000556:	480b      	ldr	r0, [pc, #44]	@ (8000584 <MX_GPIO_Init+0x90>)
 8000558:	f000 fd24 	bl	8000fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800055c:	2308      	movs	r3, #8
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000564:	2301      	movs	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	@ (8000584 <MX_GPIO_Init+0x90>)
 8000574:	f000 fbac 	bl	8000cd0 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48000400 	.word	0x48000400

08000588 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	LED_TOGGLE();
 8000590:	2108      	movs	r1, #8
 8000592:	4803      	ldr	r0, [pc, #12]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000594:	f000 fd1e 	bl	8000fd4 <HAL_GPIO_TogglePin>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	48000400 	.word	0x48000400

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fa0b 	bl	80009c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f814 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f7ff ffa0 	bl	80004f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 f942 	bl	800083c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80005b8:	f000 f8e2 	bl	8000780 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80005bc:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <main+0x30>)
 80005be:	f001 ff1f 	bl	8002400 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c2:	f002 fe47 	bl	8003254 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80005c6:	f7ff ff7b 	bl	80004c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80005ca:	f002 fe67 	bl	800329c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ce:	bf00      	nop
 80005d0:	e7fd      	b.n	80005ce <main+0x2a>
 80005d2:	bf00      	nop
 80005d4:	20000030 	.word	0x20000030

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	@ 0x58
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	2244      	movs	r2, #68	@ 0x44
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f005 fbb6 	bl	8005d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005fe:	f000 fd21 	bl	8001044 <HAL_PWREx_ControlVoltageScaling>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000608:	f000 f848 	bl	800069c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800060c:	f000 fcfc 	bl	8001008 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <SystemClock_Config+0xc0>)
 8000612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000616:	4a20      	ldr	r2, [pc, #128]	@ (8000698 <SystemClock_Config+0xc0>)
 8000618:	f023 0318 	bic.w	r3, r3, #24
 800061c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000620:	2314      	movs	r3, #20
 8000622:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000624:	2301      	movs	r3, #1
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000630:	2360      	movs	r3, #96	@ 0x60
 8000632:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000638:	2301      	movs	r3, #1
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000640:	2310      	movs	r3, #16
 8000642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000644:	2307      	movs	r3, #7
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fd4b 	bl	80010f0 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000660:	f000 f81c 	bl	800069c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2303      	movs	r3, #3
 800066a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	2101      	movs	r1, #1
 800067c:	4618      	mov	r0, r3
 800067e:	f001 f94b 	bl	8001918 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000688:	f000 f808 	bl	800069c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800068c:	f001 fd5e 	bl	800214c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000690:	bf00      	nop
 8000692:	3758      	adds	r7, #88	@ 0x58
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <Error_Handler+0x8>

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <HAL_MspInit+0x4c>)
 80006b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006b2:	4a10      	ldr	r2, [pc, #64]	@ (80006f4 <HAL_MspInit+0x4c>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <HAL_MspInit+0x4c>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <HAL_MspInit+0x4c>)
 80006c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006ca:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <HAL_MspInit+0x4c>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <HAL_MspInit+0x4c>)
 80006d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	210f      	movs	r1, #15
 80006e2:	f06f 0001 	mvn.w	r0, #1
 80006e6:	f000 fabc 	bl	8000c62 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <NMI_Handler+0x4>

08000700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <MemManage_Handler+0x4>

08000710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <UsageFault_Handler+0x4>

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000732:	f000 f99b 	bl	8000a6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000736:	f004 fa91 	bl	8004c5c <xTaskGetSchedulerState>
 800073a:	4603      	mov	r3, r0
 800073c:	2b01      	cmp	r3, #1
 800073e:	d001      	beq.n	8000744 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000740:	f005 f88a 	bl	8005858 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800074c:	4802      	ldr	r0, [pc, #8]	@ (8000758 <TIM6_DAC_IRQHandler+0x10>)
 800074e:	f001 feab 	bl	80024a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000030 	.word	0x20000030

0800075c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000760:	4b06      	ldr	r3, [pc, #24]	@ (800077c <SystemInit+0x20>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000766:	4a05      	ldr	r2, [pc, #20]	@ (800077c <SystemInit+0x20>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000790:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_TIM6_Init+0x68>)
 8000792:	4a16      	ldr	r2, [pc, #88]	@ (80007ec <MX_TIM6_Init+0x6c>)
 8000794:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_TIM6_Init+0x68>)
 8000798:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800079c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_TIM6_Init+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20000-1;
 80007a4:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_TIM6_Init+0x68>)
 80007a6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_TIM6_Init+0x68>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007b2:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <MX_TIM6_Init+0x68>)
 80007b4:	f001 fdcc 	bl	8002350 <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80007be:	f7ff ff6d 	bl	800069c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	@ (80007e8 <MX_TIM6_Init+0x68>)
 80007d0:	f001 fff8 	bl	80027c4 <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80007da:	f7ff ff5f 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000030 	.word	0x20000030
 80007ec:	40001000 	.word	0x40001000

080007f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <HAL_TIM_Base_MspInit+0x44>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d113      	bne.n	800082a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000802:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <HAL_TIM_Base_MspInit+0x48>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000806:	4a0c      	ldr	r2, [pc, #48]	@ (8000838 <HAL_TIM_Base_MspInit+0x48>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6593      	str	r3, [r2, #88]	@ 0x58
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <HAL_TIM_Base_MspInit+0x48>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2105      	movs	r1, #5
 800081e:	2036      	movs	r0, #54	@ 0x36
 8000820:	f000 fa1f 	bl	8000c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000824:	2036      	movs	r0, #54	@ 0x36
 8000826:	f000 fa38 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40001000 	.word	0x40001000
 8000838:	40021000 	.word	0x40021000

0800083c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_USART2_UART_Init+0x58>)
 8000842:	4a15      	ldr	r2, [pc, #84]	@ (8000898 <MX_USART2_UART_Init+0x5c>)
 8000844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000846:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <MX_USART2_UART_Init+0x58>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_USART2_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_USART2_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_USART2_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_USART2_UART_Init+0x58>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_USART2_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_USART2_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_USART2_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_USART2_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_USART2_UART_Init+0x58>)
 8000880:	f002 f824 	bl	80028cc <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800088a:	f7ff ff07 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000007c 	.word	0x2000007c
 8000898:	40004400 	.word	0x40004400

0800089c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b09e      	sub	sp, #120	@ 0x78
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	2254      	movs	r2, #84	@ 0x54
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f005 fa4b 	bl	8005d58 <memset>
  if(uartHandle->Instance==USART2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a28      	ldr	r2, [pc, #160]	@ (8000968 <HAL_UART_MspInit+0xcc>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d148      	bne.n	800095e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fa41 	bl	8001d60 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e4:	f7ff feda 	bl	800069c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e8:	4b20      	ldr	r3, [pc, #128]	@ (800096c <HAL_UART_MspInit+0xd0>)
 80008ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ec:	4a1f      	ldr	r2, [pc, #124]	@ (800096c <HAL_UART_MspInit+0xd0>)
 80008ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80008f4:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <HAL_UART_MspInit+0xd0>)
 80008f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <HAL_UART_MspInit+0xd0>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000904:	4a19      	ldr	r2, [pc, #100]	@ (800096c <HAL_UART_MspInit+0xd0>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090c:	4b17      	ldr	r3, [pc, #92]	@ (800096c <HAL_UART_MspInit+0xd0>)
 800090e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000918:	2304      	movs	r3, #4
 800091a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000928:	2307      	movs	r3, #7
 800092a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000936:	f000 f9cb 	bl	8000cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800093a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800093e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800094c:	2303      	movs	r3, #3
 800094e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000954:	4619      	mov	r1, r3
 8000956:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095a:	f000 f9b9 	bl	8000cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800095e:	bf00      	nop
 8000960:	3778      	adds	r7, #120	@ 0x78
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40004400 	.word	0x40004400
 800096c:	40021000 	.word	0x40021000

08000970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000974:	f7ff fef2 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000978:	480c      	ldr	r0, [pc, #48]	@ (80009ac <LoopForever+0x6>)
  ldr r1, =_edata
 800097a:	490d      	ldr	r1, [pc, #52]	@ (80009b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800097c:	4a0d      	ldr	r2, [pc, #52]	@ (80009b4 <LoopForever+0xe>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000990:	4c0a      	ldr	r4, [pc, #40]	@ (80009bc <LoopForever+0x16>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800099e:	f005 f9e3 	bl	8005d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a2:	f7ff fdff 	bl	80005a4 <main>

080009a6 <LoopForever>:

LoopForever:
    b LoopForever
 80009a6:	e7fe      	b.n	80009a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009b4:	08005e84 	.word	0x08005e84
  ldr r2, =_sbss
 80009b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009bc:	20001a10 	.word	0x20001a10

080009c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC1_IRQHandler>

080009c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f93d 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d2:	200f      	movs	r0, #15
 80009d4:	f000 f80e 	bl	80009f4 <HAL_InitTick>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	e001      	b.n	80009e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009e4:	f7ff fe60 	bl	80006a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a00:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <HAL_InitTick+0x6c>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d023      	beq.n	8000a50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a08:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <HAL_InitTick+0x70>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <HAL_InitTick+0x6c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f949 	bl	8000cb6 <HAL_SYSTICK_Config>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10f      	bne.n	8000a4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b0f      	cmp	r3, #15
 8000a2e:	d809      	bhi.n	8000a44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	2200      	movs	r2, #0
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f000 f913 	bl	8000c62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <HAL_InitTick+0x74>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	e007      	b.n	8000a54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	e004      	b.n	8000a54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	73fb      	strb	r3, [r7, #15]
 8000a4e:	e001      	b.n	8000a54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000000 	.word	0x20000000
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000104 	.word	0x20000104

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	@ (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000104 	.word	0x20000104

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	@ (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4907      	ldr	r1, [pc, #28]	@ (8000b48 <__NVIC_EnableIRQ+0x38>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	@ (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	@ (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	@ 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	@ 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c18:	d301      	bcc.n	8000c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00f      	b.n	8000c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <SysTick_Config+0x40>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c26:	210f      	movs	r1, #15
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f7ff ff8e 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <SysTick_Config+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <SysTick_Config+0x40>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff29 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c74:	f7ff ff3e 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f7ff ff8e 	bl	8000ba0 <NVIC_EncodePriority>
 8000c84:	4602      	mov	r2, r0
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff5d 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff31 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffa2 	bl	8000c08 <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b087      	sub	sp, #28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cde:	e148      	b.n	8000f72 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f000 813a 	beq.w	8000f6c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d005      	beq.n	8000d10 <HAL_GPIO_Init+0x40>
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d130      	bne.n	8000d72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d46:	2201      	movs	r2, #1
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	091b      	lsrs	r3, r3, #4
 8000d5c:	f003 0201 	and.w	r2, r3, #1
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	2b03      	cmp	r3, #3
 8000d7c:	d017      	beq.n	8000dae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d123      	bne.n	8000e02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	08da      	lsrs	r2, r3, #3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f003 0307 	and.w	r3, r3, #7
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	08da      	lsrs	r2, r3, #3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3208      	adds	r2, #8
 8000dfc:	6939      	ldr	r1, [r7, #16]
 8000dfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0203 	and.w	r2, r3, #3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8094 	beq.w	8000f6c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e44:	4b52      	ldr	r3, [pc, #328]	@ (8000f90 <HAL_GPIO_Init+0x2c0>)
 8000e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e48:	4a51      	ldr	r2, [pc, #324]	@ (8000f90 <HAL_GPIO_Init+0x2c0>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e50:	4b4f      	ldr	r3, [pc, #316]	@ (8000f90 <HAL_GPIO_Init+0x2c0>)
 8000e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e54:	f003 0301 	and.w	r3, r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e5c:	4a4d      	ldr	r2, [pc, #308]	@ (8000f94 <HAL_GPIO_Init+0x2c4>)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	220f      	movs	r2, #15
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e86:	d00d      	beq.n	8000ea4 <HAL_GPIO_Init+0x1d4>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a43      	ldr	r2, [pc, #268]	@ (8000f98 <HAL_GPIO_Init+0x2c8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x1d0>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a42      	ldr	r2, [pc, #264]	@ (8000f9c <HAL_GPIO_Init+0x2cc>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d101      	bne.n	8000e9c <HAL_GPIO_Init+0x1cc>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	e004      	b.n	8000ea6 <HAL_GPIO_Init+0x1d6>
 8000e9c:	2307      	movs	r3, #7
 8000e9e:	e002      	b.n	8000ea6 <HAL_GPIO_Init+0x1d6>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <HAL_GPIO_Init+0x1d6>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	f002 0203 	and.w	r2, r2, #3
 8000eac:	0092      	lsls	r2, r2, #2
 8000eae:	4093      	lsls	r3, r2
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eb6:	4937      	ldr	r1, [pc, #220]	@ (8000f94 <HAL_GPIO_Init+0x2c4>)
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ec4:	4b36      	ldr	r3, [pc, #216]	@ (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eee:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f12:	4a23      	ldr	r2, [pc, #140]	@ (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f18:	4b21      	ldr	r3, [pc, #132]	@ (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f3c:	4a18      	ldr	r2, [pc, #96]	@ (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f42:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f66:	4a0e      	ldr	r2, [pc, #56]	@ (8000fa0 <HAL_GPIO_Init+0x2d0>)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f47f aeaf 	bne.w	8000ce0 <HAL_GPIO_Init+0x10>
  }
}
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
 8000f86:	371c      	adds	r7, #28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010000 	.word	0x40010000
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	48000800 	.word	0x48000800
 8000fa0:	40010400 	.word	0x40010400

08000fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4013      	ands	r3, r2
 8000fec:	041a      	lsls	r2, r3, #16
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43d9      	mvns	r1, r3
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	400b      	ands	r3, r1
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40007000 	.word	0x40007000

08001028 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800102c:	4b04      	ldr	r3, [pc, #16]	@ (8001040 <HAL_PWREx_GetVoltageRange+0x18>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40007000 	.word	0x40007000

08001044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001052:	d130      	bne.n	80010b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001054:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800105c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001060:	d038      	beq.n	80010d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001062:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800106a:	4a1e      	ldr	r2, [pc, #120]	@ (80010e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800106c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001070:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001072:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2232      	movs	r2, #50	@ 0x32
 8001078:	fb02 f303 	mul.w	r3, r2, r3
 800107c:	4a1b      	ldr	r2, [pc, #108]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0c9b      	lsrs	r3, r3, #18
 8001084:	3301      	adds	r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001088:	e002      	b.n	8001090 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3b01      	subs	r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800109c:	d102      	bne.n	80010a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f2      	bne.n	800108a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010b0:	d110      	bne.n	80010d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e00f      	b.n	80010d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80010b6:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010c2:	d007      	beq.n	80010d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010c4:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010cc:	4a05      	ldr	r2, [pc, #20]	@ (80010e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40007000 	.word	0x40007000
 80010e8:	20000000 	.word	0x20000000
 80010ec:	431bde83 	.word	0x431bde83

080010f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	f000 bc02 	b.w	8001908 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001104:	4b96      	ldr	r3, [pc, #600]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800110e:	4b94      	ldr	r3, [pc, #592]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0310 	and.w	r3, r3, #16
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80e4 	beq.w	80012ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <HAL_RCC_OscConfig+0x4c>
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2b0c      	cmp	r3, #12
 8001130:	f040 808b 	bne.w	800124a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2b01      	cmp	r3, #1
 8001138:	f040 8087 	bne.w	800124a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800113c:	4b88      	ldr	r3, [pc, #544]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_RCC_OscConfig+0x64>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e3d9      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1a      	ldr	r2, [r3, #32]
 8001158:	4b81      	ldr	r3, [pc, #516]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <HAL_RCC_OscConfig+0x7e>
 8001164:	4b7e      	ldr	r3, [pc, #504]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800116c:	e005      	b.n	800117a <HAL_RCC_OscConfig+0x8a>
 800116e:	4b7c      	ldr	r3, [pc, #496]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001170:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001174:	091b      	lsrs	r3, r3, #4
 8001176:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800117a:	4293      	cmp	r3, r2
 800117c:	d223      	bcs.n	80011c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fd8c 	bl	8001ca0 <RCC_SetFlashLatencyFromMSIRange>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e3ba      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001192:	4b73      	ldr	r3, [pc, #460]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a72      	ldr	r2, [pc, #456]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b70      	ldr	r3, [pc, #448]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	496d      	ldr	r1, [pc, #436]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	4968      	ldr	r1, [pc, #416]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	604b      	str	r3, [r1, #4]
 80011c4:	e025      	b.n	8001212 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c6:	4b66      	ldr	r3, [pc, #408]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a65      	ldr	r2, [pc, #404]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	4b63      	ldr	r3, [pc, #396]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4960      	ldr	r1, [pc, #384]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	495b      	ldr	r1, [pc, #364]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fd4c 	bl	8001ca0 <RCC_SetFlashLatencyFromMSIRange>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e37a      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001212:	f000 fc81 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001216:	4602      	mov	r2, r0
 8001218:	4b51      	ldr	r3, [pc, #324]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	4950      	ldr	r1, [pc, #320]	@ (8001364 <HAL_RCC_OscConfig+0x274>)
 8001224:	5ccb      	ldrb	r3, [r1, r3]
 8001226:	f003 031f 	and.w	r3, r3, #31
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	4a4e      	ldr	r2, [pc, #312]	@ (8001368 <HAL_RCC_OscConfig+0x278>)
 8001230:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001232:	4b4e      	ldr	r3, [pc, #312]	@ (800136c <HAL_RCC_OscConfig+0x27c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fbdc 	bl	80009f4 <HAL_InitTick>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d052      	beq.n	80012ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	e35e      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d032      	beq.n	80012b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001252:	4b43      	ldr	r3, [pc, #268]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a42      	ldr	r2, [pc, #264]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800125e:	f7ff fc19 	bl	8000a94 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001266:	f7ff fc15 	bl	8000a94 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e347      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001278:	4b39      	ldr	r3, [pc, #228]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d0f0      	beq.n	8001266 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001284:	4b36      	ldr	r3, [pc, #216]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a35      	ldr	r2, [pc, #212]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b33      	ldr	r3, [pc, #204]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	4930      	ldr	r1, [pc, #192]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	492b      	ldr	r1, [pc, #172]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]
 80012b6:	e01a      	b.n	80012ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012b8:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a28      	ldr	r2, [pc, #160]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fbe6 	bl	8000a94 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012cc:	f7ff fbe2 	bl	8000a94 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e314      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012de:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x1dc>
 80012ea:	e000      	b.n	80012ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d073      	beq.n	80013e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d005      	beq.n	800130c <HAL_RCC_OscConfig+0x21c>
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2b0c      	cmp	r3, #12
 8001304:	d10e      	bne.n	8001324 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d10b      	bne.n	8001324 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d063      	beq.n	80013e0 <HAL_RCC_OscConfig+0x2f0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d15f      	bne.n	80013e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e2f1      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800132c:	d106      	bne.n	800133c <HAL_RCC_OscConfig+0x24c>
 800132e:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a0b      	ldr	r2, [pc, #44]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e025      	b.n	8001388 <HAL_RCC_OscConfig+0x298>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001344:	d114      	bne.n	8001370 <HAL_RCC_OscConfig+0x280>
 8001346:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a05      	ldr	r2, [pc, #20]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a02      	ldr	r2, [pc, #8]	@ (8001360 <HAL_RCC_OscConfig+0x270>)
 8001358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e013      	b.n	8001388 <HAL_RCC_OscConfig+0x298>
 8001360:	40021000 	.word	0x40021000
 8001364:	08005e2c 	.word	0x08005e2c
 8001368:	20000000 	.word	0x20000000
 800136c:	20000004 	.word	0x20000004
 8001370:	4ba0      	ldr	r3, [pc, #640]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a9f      	ldr	r2, [pc, #636]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b9d      	ldr	r3, [pc, #628]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a9c      	ldr	r2, [pc, #624]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d013      	beq.n	80013b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fb80 	bl	8000a94 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fb7c 	bl	8000a94 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	@ 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e2ae      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013aa:	4b92      	ldr	r3, [pc, #584]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x2a8>
 80013b6:	e014      	b.n	80013e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fb6c 	bl	8000a94 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fb68 	bl	8000a94 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	@ 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e29a      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013d2:	4b88      	ldr	r3, [pc, #544]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x2d0>
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d060      	beq.n	80014b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_OscConfig+0x310>
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b0c      	cmp	r3, #12
 80013f8:	d119      	bne.n	800142e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d116      	bne.n	800142e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001400:	4b7c      	ldr	r3, [pc, #496]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_OscConfig+0x328>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e277      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001418:	4b76      	ldr	r3, [pc, #472]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	061b      	lsls	r3, r3, #24
 8001426:	4973      	ldr	r1, [pc, #460]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001428:	4313      	orrs	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800142c:	e040      	b.n	80014b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d023      	beq.n	800147e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001436:	4b6f      	ldr	r3, [pc, #444]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a6e      	ldr	r2, [pc, #440]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff fb27 	bl	8000a94 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144a:	f7ff fb23 	bl	8000a94 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e255      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800145c:	4b65      	ldr	r3, [pc, #404]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001468:	4b62      	ldr	r3, [pc, #392]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	061b      	lsls	r3, r3, #24
 8001476:	495f      	ldr	r1, [pc, #380]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	e018      	b.n	80014b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147e:	4b5d      	ldr	r3, [pc, #372]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a5c      	ldr	r2, [pc, #368]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148a:	f7ff fb03 	bl	8000a94 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001492:	f7ff faff 	bl	8000a94 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e231      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014a4:	4b53      	ldr	r3, [pc, #332]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d03c      	beq.n	8001536 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01c      	beq.n	80014fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c4:	4b4b      	ldr	r3, [pc, #300]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 80014c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ca:	4a4a      	ldr	r2, [pc, #296]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff fade 	bl	8000a94 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014dc:	f7ff fada 	bl	8000a94 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e20c      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ee:	4b41      	ldr	r3, [pc, #260]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 80014f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0ef      	beq.n	80014dc <HAL_RCC_OscConfig+0x3ec>
 80014fc:	e01b      	b.n	8001536 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014fe:	4b3d      	ldr	r3, [pc, #244]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001500:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001504:	4a3b      	ldr	r2, [pc, #236]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff fac1 	bl	8000a94 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001516:	f7ff fabd 	bl	8000a94 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1ef      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001528:	4b32      	ldr	r3, [pc, #200]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 800152a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1ef      	bne.n	8001516 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 80a6 	beq.w	8001690 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001544:	2300      	movs	r3, #0
 8001546:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001548:	4b2a      	ldr	r3, [pc, #168]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10d      	bne.n	8001570 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001554:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001558:	4a26      	ldr	r2, [pc, #152]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001560:	4b24      	ldr	r3, [pc, #144]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800156c:	2301      	movs	r3, #1
 800156e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001570:	4b21      	ldr	r3, [pc, #132]	@ (80015f8 <HAL_RCC_OscConfig+0x508>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d118      	bne.n	80015ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800157c:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <HAL_RCC_OscConfig+0x508>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1d      	ldr	r2, [pc, #116]	@ (80015f8 <HAL_RCC_OscConfig+0x508>)
 8001582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001586:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001588:	f7ff fa84 	bl	8000a94 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001590:	f7ff fa80 	bl	8000a94 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1b2      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <HAL_RCC_OscConfig+0x508>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d108      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4d8>
 80015b6:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 80015b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015bc:	4a0d      	ldr	r2, [pc, #52]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015c6:	e029      	b.n	800161c <HAL_RCC_OscConfig+0x52c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d115      	bne.n	80015fc <HAL_RCC_OscConfig+0x50c>
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 80015d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d6:	4a07      	ldr	r2, [pc, #28]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015e0:	4b04      	ldr	r3, [pc, #16]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 80015e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015e6:	4a03      	ldr	r2, [pc, #12]	@ (80015f4 <HAL_RCC_OscConfig+0x504>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80015f0:	e014      	b.n	800161c <HAL_RCC_OscConfig+0x52c>
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40007000 	.word	0x40007000
 80015fc:	4b9a      	ldr	r3, [pc, #616]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001602:	4a99      	ldr	r2, [pc, #612]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800160c:	4b96      	ldr	r3, [pc, #600]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 800160e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001612:	4a95      	ldr	r2, [pc, #596]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d016      	beq.n	8001652 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fa36 	bl	8000a94 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800162a:	e00a      	b.n	8001642 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162c:	f7ff fa32 	bl	8000a94 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e162      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001642:	4b89      	ldr	r3, [pc, #548]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 8001644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0ed      	beq.n	800162c <HAL_RCC_OscConfig+0x53c>
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001652:	f7ff fa1f 	bl	8000a94 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff fa1b 	bl	8000a94 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001668:	4293      	cmp	r3, r2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e14b      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001670:	4b7d      	ldr	r3, [pc, #500]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ed      	bne.n	800165a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800167e:	7ffb      	ldrb	r3, [r7, #31]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d105      	bne.n	8001690 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001684:	4b78      	ldr	r3, [pc, #480]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 8001686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001688:	4a77      	ldr	r2, [pc, #476]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 800168a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800168e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	2b00      	cmp	r3, #0
 800169a:	d03c      	beq.n	8001716 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d01c      	beq.n	80016de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016a4:	4b70      	ldr	r3, [pc, #448]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 80016a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff f9ee 	bl	8000a94 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016bc:	f7ff f9ea 	bl	8000a94 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e11c      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016ce:	4b66      	ldr	r3, [pc, #408]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 80016d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ef      	beq.n	80016bc <HAL_RCC_OscConfig+0x5cc>
 80016dc:	e01b      	b.n	8001716 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016de:	4b62      	ldr	r3, [pc, #392]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 80016e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016e4:	4a60      	ldr	r2, [pc, #384]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff f9d1 	bl	8000a94 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016f6:	f7ff f9cd 	bl	8000a94 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0ff      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001708:	4b57      	ldr	r3, [pc, #348]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 800170a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ef      	bne.n	80016f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 80f3 	beq.w	8001906 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001724:	2b02      	cmp	r3, #2
 8001726:	f040 80c9 	bne.w	80018bc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800172a:	4b4f      	ldr	r3, [pc, #316]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f003 0203 	and.w	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173a:	429a      	cmp	r2, r3
 800173c:	d12c      	bne.n	8001798 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001748:	3b01      	subs	r3, #1
 800174a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d123      	bne.n	8001798 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800175a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800175c:	429a      	cmp	r2, r3
 800175e:	d11b      	bne.n	8001798 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800176a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d113      	bne.n	8001798 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800177a:	085b      	lsrs	r3, r3, #1
 800177c:	3b01      	subs	r3, #1
 800177e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d109      	bne.n	8001798 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178e:	085b      	lsrs	r3, r3, #1
 8001790:	3b01      	subs	r3, #1
 8001792:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d06b      	beq.n	8001870 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b0c      	cmp	r3, #12
 800179c:	d062      	beq.n	8001864 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800179e:	4b32      	ldr	r3, [pc, #200]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0ac      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 80017b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017ba:	f7ff f96b 	bl	8000a94 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff f967 	bl	8000a94 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e099      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d4:	4b24      	ldr	r3, [pc, #144]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e0:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	4b21      	ldr	r3, [pc, #132]	@ (800186c <HAL_RCC_OscConfig+0x77c>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017f0:	3a01      	subs	r2, #1
 80017f2:	0112      	lsls	r2, r2, #4
 80017f4:	4311      	orrs	r1, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017fa:	0212      	lsls	r2, r2, #8
 80017fc:	4311      	orrs	r1, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001802:	0852      	lsrs	r2, r2, #1
 8001804:	3a01      	subs	r2, #1
 8001806:	0552      	lsls	r2, r2, #21
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800180e:	0852      	lsrs	r2, r2, #1
 8001810:	3a01      	subs	r2, #1
 8001812:	0652      	lsls	r2, r2, #25
 8001814:	4311      	orrs	r1, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800181a:	06d2      	lsls	r2, r2, #27
 800181c:	430a      	orrs	r2, r1
 800181e:	4912      	ldr	r1, [pc, #72]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 8001820:	4313      	orrs	r3, r2
 8001822:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001824:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0f      	ldr	r2, [pc, #60]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 800182a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800182e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001830:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4a0c      	ldr	r2, [pc, #48]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 8001836:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800183a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800183c:	f7ff f92a 	bl	8000a94 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff f926 	bl	8000a94 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e058      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001856:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <HAL_RCC_OscConfig+0x778>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001862:	e050      	b.n	8001906 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e04f      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
 8001868:	40021000 	.word	0x40021000
 800186c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001870:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <HAL_RCC_OscConfig+0x820>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d144      	bne.n	8001906 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800187c:	4b24      	ldr	r3, [pc, #144]	@ (8001910 <HAL_RCC_OscConfig+0x820>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a23      	ldr	r2, [pc, #140]	@ (8001910 <HAL_RCC_OscConfig+0x820>)
 8001882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001886:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001888:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <HAL_RCC_OscConfig+0x820>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	4a20      	ldr	r2, [pc, #128]	@ (8001910 <HAL_RCC_OscConfig+0x820>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001892:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001894:	f7ff f8fe 	bl	8000a94 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f8fa 	bl	8000a94 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e02c      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ae:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <HAL_RCC_OscConfig+0x820>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x7ac>
 80018ba:	e024      	b.n	8001906 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d01f      	beq.n	8001902 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c2:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <HAL_RCC_OscConfig+0x820>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a12      	ldr	r2, [pc, #72]	@ (8001910 <HAL_RCC_OscConfig+0x820>)
 80018c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff f8e1 	bl	8000a94 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d6:	f7ff f8dd 	bl	8000a94 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e00f      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_RCC_OscConfig+0x820>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f0      	bne.n	80018d6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_RCC_OscConfig+0x820>)
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	4905      	ldr	r1, [pc, #20]	@ (8001910 <HAL_RCC_OscConfig+0x820>)
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_RCC_OscConfig+0x824>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
 8001900:	e001      	b.n	8001906 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000
 8001914:	feeefffc 	.word	0xfeeefffc

08001918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0e7      	b.n	8001afc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b75      	ldr	r3, [pc, #468]	@ (8001b04 <HAL_RCC_ClockConfig+0x1ec>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d910      	bls.n	800195c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b72      	ldr	r3, [pc, #456]	@ (8001b04 <HAL_RCC_ClockConfig+0x1ec>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 0207 	bic.w	r2, r3, #7
 8001942:	4970      	ldr	r1, [pc, #448]	@ (8001b04 <HAL_RCC_ClockConfig+0x1ec>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b04 <HAL_RCC_ClockConfig+0x1ec>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0cf      	b.n	8001afc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d010      	beq.n	800198a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	4b66      	ldr	r3, [pc, #408]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001974:	429a      	cmp	r2, r3
 8001976:	d908      	bls.n	800198a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001978:	4b63      	ldr	r3, [pc, #396]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4960      	ldr	r1, [pc, #384]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d04c      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b03      	cmp	r3, #3
 800199c:	d107      	bne.n	80019ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	4b5a      	ldr	r3, [pc, #360]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d121      	bne.n	80019ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0a6      	b.n	8001afc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b6:	4b54      	ldr	r3, [pc, #336]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d115      	bne.n	80019ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e09a      	b.n	8001afc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d107      	bne.n	80019de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d109      	bne.n	80019ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e08e      	b.n	8001afc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019de:	4b4a      	ldr	r3, [pc, #296]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e086      	b.n	8001afc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019ee:	4b46      	ldr	r3, [pc, #280]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f023 0203 	bic.w	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4943      	ldr	r1, [pc, #268]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a00:	f7ff f848 	bl	8000a94 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff f844 	bl	8000a94 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e06e      	b.n	8001afc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 020c 	and.w	r2, r3, #12
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d1eb      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d010      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	4b31      	ldr	r3, [pc, #196]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d208      	bcs.n	8001a5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	492b      	ldr	r1, [pc, #172]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5e:	4b29      	ldr	r3, [pc, #164]	@ (8001b04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d210      	bcs.n	8001a8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6c:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 0207 	bic.w	r2, r3, #7
 8001a74:	4923      	ldr	r1, [pc, #140]	@ (8001b04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7c:	4b21      	ldr	r3, [pc, #132]	@ (8001b04 <HAL_RCC_ClockConfig+0x1ec>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e036      	b.n	8001afc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d008      	beq.n	8001aac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	4918      	ldr	r1, [pc, #96]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d009      	beq.n	8001acc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab8:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4910      	ldr	r1, [pc, #64]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001acc:	f000 f824 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	490b      	ldr	r1, [pc, #44]	@ (8001b0c <HAL_RCC_ClockConfig+0x1f4>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <HAL_RCC_ClockConfig+0x1f8>)
 8001aea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001aec:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_RCC_ClockConfig+0x1fc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe ff7f 	bl	80009f4 <HAL_InitTick>
 8001af6:	4603      	mov	r3, r0
 8001af8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001afa:	7afb      	ldrb	r3, [r7, #11]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	08005e2c 	.word	0x08005e2c
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	@ 0x24
 8001b1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b26:	4b3e      	ldr	r3, [pc, #248]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b30:	4b3b      	ldr	r3, [pc, #236]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x34>
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d121      	bne.n	8001b8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d11e      	bne.n	8001b8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b4c:	4b34      	ldr	r3, [pc, #208]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b58:	4b31      	ldr	r3, [pc, #196]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e005      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b68:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b74:	4a2b      	ldr	r2, [pc, #172]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10d      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d102      	bne.n	8001b96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b90:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b92:	61bb      	str	r3, [r7, #24]
 8001b94:	e004      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b9c:	4b23      	ldr	r3, [pc, #140]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001b9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d134      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0xa6>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d003      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0xac>
 8001bbc:	e005      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bc0:	617b      	str	r3, [r7, #20]
      break;
 8001bc2:	e005      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x114>)
 8001bc6:	617b      	str	r3, [r7, #20]
      break;
 8001bc8:	e002      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	617b      	str	r3, [r7, #20]
      break;
 8001bce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	3301      	adds	r3, #1
 8001bdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	fb03 f202 	mul.w	r2, r3, r2
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	0e5b      	lsrs	r3, r3, #25
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	3301      	adds	r3, #1
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c10:	69bb      	ldr	r3, [r7, #24]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	@ 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000
 8001c24:	08005e44 	.word	0x08005e44
 8001c28:	00f42400 	.word	0x00f42400
 8001c2c:	007a1200 	.word	0x007a1200

08001c30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c34:	4b03      	ldr	r3, [pc, #12]	@ (8001c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000000 	.word	0x20000000

08001c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c4c:	f7ff fff0 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4904      	ldr	r1, [pc, #16]	@ (8001c70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	f003 031f 	and.w	r3, r3, #31
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08005e3c 	.word	0x08005e3c

08001c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c78:	f7ff ffda 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0adb      	lsrs	r3, r3, #11
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4904      	ldr	r1, [pc, #16]	@ (8001c9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	08005e3c 	.word	0x08005e3c

08001ca0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cac:	4b2a      	ldr	r3, [pc, #168]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cb8:	f7ff f9b6 	bl	8001028 <HAL_PWREx_GetVoltageRange>
 8001cbc:	6178      	str	r0, [r7, #20]
 8001cbe:	e014      	b.n	8001cea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	4b25      	ldr	r3, [pc, #148]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc4:	4a24      	ldr	r2, [pc, #144]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ccc:	4b22      	ldr	r3, [pc, #136]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cd8:	f7ff f9a6 	bl	8001028 <HAL_PWREx_GetVoltageRange>
 8001cdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cde:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ce8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cf0:	d10b      	bne.n	8001d0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b80      	cmp	r3, #128	@ 0x80
 8001cf6:	d919      	bls.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2ba0      	cmp	r3, #160	@ 0xa0
 8001cfc:	d902      	bls.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cfe:	2302      	movs	r3, #2
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	e013      	b.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d04:	2301      	movs	r3, #1
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	e010      	b.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b80      	cmp	r3, #128	@ 0x80
 8001d0e:	d902      	bls.n	8001d16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d10:	2303      	movs	r3, #3
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	e00a      	b.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b80      	cmp	r3, #128	@ 0x80
 8001d1a:	d102      	bne.n	8001d22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	e004      	b.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b70      	cmp	r3, #112	@ 0x70
 8001d26:	d101      	bne.n	8001d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d28:	2301      	movs	r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 0207 	bic.w	r2, r3, #7
 8001d34:	4909      	ldr	r1, [pc, #36]	@ (8001d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d3c:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40022000 	.word	0x40022000

08001d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d68:	2300      	movs	r3, #0
 8001d6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d031      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d80:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d84:	d01a      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001d86:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d8a:	d814      	bhi.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d009      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d94:	d10f      	bne.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001d96:	4b5d      	ldr	r3, [pc, #372]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	4a5c      	ldr	r2, [pc, #368]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001da2:	e00c      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3304      	adds	r3, #4
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 f9de 	bl	800216c <RCCEx_PLLSAI1_Config>
 8001db0:	4603      	mov	r3, r0
 8001db2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001db4:	e003      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	74fb      	strb	r3, [r7, #19]
      break;
 8001dba:	e000      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dbe:	7cfb      	ldrb	r3, [r7, #19]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10b      	bne.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dc4:	4b51      	ldr	r3, [pc, #324]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd2:	494e      	ldr	r1, [pc, #312]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001dda:	e001      	b.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 809e 	beq.w	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001df2:	4b46      	ldr	r3, [pc, #280]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001e02:	2300      	movs	r3, #0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00d      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e14:	4b3d      	ldr	r3, [pc, #244]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e20:	2301      	movs	r3, #1
 8001e22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e24:	4b3a      	ldr	r3, [pc, #232]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a39      	ldr	r2, [pc, #228]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e30:	f7fe fe30 	bl	8000a94 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e36:	e009      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e38:	f7fe fe2c 	bl	8000a94 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d902      	bls.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	74fb      	strb	r3, [r7, #19]
        break;
 8001e4a:	e005      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e4c:	4b30      	ldr	r3, [pc, #192]	@ (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ef      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001e58:	7cfb      	ldrb	r3, [r7, #19]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d15a      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d01e      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d019      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e84:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e86:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e96:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ea2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ea6:	4a19      	ldr	r2, [pc, #100]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d016      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7fe fdec 	bl	8000a94 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ebe:	e00b      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec0:	f7fe fde8 	bl	8000a94 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d902      	bls.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	74fb      	strb	r3, [r7, #19]
            break;
 8001ed6:	e006      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0ec      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001ee6:	7cfb      	ldrb	r3, [r7, #19]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10b      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eec:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001efa:	4904      	ldr	r1, [pc, #16]	@ (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f02:	e009      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f04:	7cfb      	ldrb	r3, [r7, #19]
 8001f06:	74bb      	strb	r3, [r7, #18]
 8001f08:	e006      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f14:	7cfb      	ldrb	r3, [r7, #19]
 8001f16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f18:	7c7b      	ldrb	r3, [r7, #17]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d105      	bne.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1e:	4b8a      	ldr	r3, [pc, #552]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f22:	4a89      	ldr	r2, [pc, #548]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f28:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f36:	4b84      	ldr	r3, [pc, #528]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3c:	f023 0203 	bic.w	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4980      	ldr	r1, [pc, #512]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f58:	4b7b      	ldr	r3, [pc, #492]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f5e:	f023 020c 	bic.w	r2, r3, #12
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	4978      	ldr	r1, [pc, #480]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f7a:	4b73      	ldr	r3, [pc, #460]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f80:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	496f      	ldr	r1, [pc, #444]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001faa:	4967      	ldr	r1, [pc, #412]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001fbe:	4b62      	ldr	r3, [pc, #392]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fcc:	495e      	ldr	r1, [pc, #376]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fe0:	4b59      	ldr	r3, [pc, #356]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fee:	4956      	ldr	r1, [pc, #344]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002002:	4b51      	ldr	r3, [pc, #324]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002008:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002010:	494d      	ldr	r1, [pc, #308]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d028      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002024:	4b48      	ldr	r3, [pc, #288]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	4945      	ldr	r1, [pc, #276]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002042:	d106      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002044:	4b40      	ldr	r3, [pc, #256]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a3f      	ldr	r2, [pc, #252]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800204a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800204e:	60d3      	str	r3, [r2, #12]
 8002050:	e011      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800205a:	d10c      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	2101      	movs	r1, #1
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f882 	bl	800216c <RCCEx_PLLSAI1_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002072:	7cfb      	ldrb	r3, [r7, #19]
 8002074:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d028      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002082:	4b31      	ldr	r3, [pc, #196]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002088:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002090:	492d      	ldr	r1, [pc, #180]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020a0:	d106      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020a2:	4b29      	ldr	r3, [pc, #164]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4a28      	ldr	r2, [pc, #160]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ac:	60d3      	str	r3, [r2, #12]
 80020ae:	e011      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3304      	adds	r3, #4
 80020be:	2101      	movs	r1, #1
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 f853 	bl	800216c <RCCEx_PLLSAI1_Config>
 80020c6:	4603      	mov	r3, r0
 80020c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020ca:	7cfb      	ldrb	r3, [r7, #19]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01c      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020e0:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ee:	4916      	ldr	r1, [pc, #88]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80020fe:	d10c      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3304      	adds	r3, #4
 8002104:	2102      	movs	r1, #2
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f830 	bl	800216c <RCCEx_PLLSAI1_Config>
 800210c:	4603      	mov	r3, r0
 800210e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002116:	7cfb      	ldrb	r3, [r7, #19]
 8002118:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002126:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002134:	4904      	ldr	r1, [pc, #16]	@ (8002148 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800213c:	7cbb      	ldrb	r3, [r7, #18]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000

0800214c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000

0800216c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800217a:	4b74      	ldr	r3, [pc, #464]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d018      	beq.n	80021b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002186:	4b71      	ldr	r3, [pc, #452]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f003 0203 	and.w	r2, r3, #3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d10d      	bne.n	80021b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
       ||
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800219e:	4b6b      	ldr	r3, [pc, #428]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
       ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d047      	beq.n	8002242 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	e044      	b.n	8002242 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d018      	beq.n	80021f2 <RCCEx_PLLSAI1_Config+0x86>
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d825      	bhi.n	8002210 <RCCEx_PLLSAI1_Config+0xa4>
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d002      	beq.n	80021ce <RCCEx_PLLSAI1_Config+0x62>
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d009      	beq.n	80021e0 <RCCEx_PLLSAI1_Config+0x74>
 80021cc:	e020      	b.n	8002210 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021ce:	4b5f      	ldr	r3, [pc, #380]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11d      	bne.n	8002216 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021de:	e01a      	b.n	8002216 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021e0:	4b5a      	ldr	r3, [pc, #360]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d116      	bne.n	800221a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f0:	e013      	b.n	800221a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021f2:	4b56      	ldr	r3, [pc, #344]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10f      	bne.n	800221e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021fe:	4b53      	ldr	r3, [pc, #332]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800220e:	e006      	b.n	800221e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
      break;
 8002214:	e004      	b.n	8002220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002216:	bf00      	nop
 8002218:	e002      	b.n	8002220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800221a:	bf00      	nop
 800221c:	e000      	b.n	8002220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800221e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10d      	bne.n	8002242 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002226:	4b49      	ldr	r3, [pc, #292]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	430b      	orrs	r3, r1
 800223c:	4943      	ldr	r1, [pc, #268]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 800223e:	4313      	orrs	r3, r2
 8002240:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d17c      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002248:	4b40      	ldr	r3, [pc, #256]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3f      	ldr	r2, [pc, #252]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 800224e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002254:	f7fe fc1e 	bl	8000a94 <HAL_GetTick>
 8002258:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800225a:	e009      	b.n	8002270 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800225c:	f7fe fc1a 	bl	8000a94 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d902      	bls.n	8002270 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	73fb      	strb	r3, [r7, #15]
        break;
 800226e:	e005      	b.n	800227c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002270:	4b36      	ldr	r3, [pc, #216]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1ef      	bne.n	800225c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d15f      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d110      	bne.n	80022aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002288:	4b30      	ldr	r3, [pc, #192]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002290:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6892      	ldr	r2, [r2, #8]
 8002298:	0211      	lsls	r1, r2, #8
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68d2      	ldr	r2, [r2, #12]
 800229e:	06d2      	lsls	r2, r2, #27
 80022a0:	430a      	orrs	r2, r1
 80022a2:	492a      	ldr	r1, [pc, #168]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	610b      	str	r3, [r1, #16]
 80022a8:	e027      	b.n	80022fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d112      	bne.n	80022d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022b0:	4b26      	ldr	r3, [pc, #152]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80022b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6892      	ldr	r2, [r2, #8]
 80022c0:	0211      	lsls	r1, r2, #8
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6912      	ldr	r2, [r2, #16]
 80022c6:	0852      	lsrs	r2, r2, #1
 80022c8:	3a01      	subs	r2, #1
 80022ca:	0552      	lsls	r2, r2, #21
 80022cc:	430a      	orrs	r2, r1
 80022ce:	491f      	ldr	r1, [pc, #124]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	610b      	str	r3, [r1, #16]
 80022d4:	e011      	b.n	80022fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022d6:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80022de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6892      	ldr	r2, [r2, #8]
 80022e6:	0211      	lsls	r1, r2, #8
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6952      	ldr	r2, [r2, #20]
 80022ec:	0852      	lsrs	r2, r2, #1
 80022ee:	3a01      	subs	r2, #1
 80022f0:	0652      	lsls	r2, r2, #25
 80022f2:	430a      	orrs	r2, r1
 80022f4:	4915      	ldr	r1, [pc, #84]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80022fa:	4b14      	ldr	r3, [pc, #80]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a13      	ldr	r2, [pc, #76]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002300:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002304:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7fe fbc5 	bl	8000a94 <HAL_GetTick>
 800230a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800230c:	e009      	b.n	8002322 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800230e:	f7fe fbc1 	bl	8000a94 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d902      	bls.n	8002322 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	73fb      	strb	r3, [r7, #15]
          break;
 8002320:	e005      	b.n	800232e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002322:	4b0a      	ldr	r3, [pc, #40]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0ef      	beq.n	800230e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4903      	ldr	r1, [pc, #12]	@ (800234c <RCCEx_PLLSAI1_Config+0x1e0>)
 800233e:	4313      	orrs	r3, r2
 8002340:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e049      	b.n	80023f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fa3a 	bl	80007f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3304      	adds	r3, #4
 800238c:	4619      	mov	r1, r3
 800238e:	4610      	mov	r0, r2
 8002390:	f000 f9b4 	bl	80026fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	d001      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e03b      	b.n	8002490 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a19      	ldr	r2, [pc, #100]	@ (800249c <HAL_TIM_Base_Start_IT+0x9c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d009      	beq.n	800244e <HAL_TIM_Base_Start_IT+0x4e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002442:	d004      	beq.n	800244e <HAL_TIM_Base_Start_IT+0x4e>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a15      	ldr	r2, [pc, #84]	@ (80024a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d115      	bne.n	800247a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <HAL_TIM_Base_Start_IT+0xa4>)
 8002456:	4013      	ands	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b06      	cmp	r3, #6
 800245e:	d015      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x8c>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002466:	d011      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002478:	e008      	b.n	800248c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e000      	b.n	800248e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40014000 	.word	0x40014000
 80024a4:	00010007 	.word	0x00010007

080024a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d020      	beq.n	800250c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01b      	beq.n	800250c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0202 	mvn.w	r2, #2
 80024dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f8e4 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f8d6 	bl	80026ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f8e7 	bl	80026d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f003 0304 	and.w	r3, r3, #4
 8002512:	2b00      	cmp	r3, #0
 8002514:	d020      	beq.n	8002558 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01b      	beq.n	8002558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f06f 0204 	mvn.w	r2, #4
 8002528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2202      	movs	r2, #2
 800252e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8be 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 8002544:	e005      	b.n	8002552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f8b0 	bl	80026ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f8c1 	bl	80026d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d020      	beq.n	80025a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01b      	beq.n	80025a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0208 	mvn.w	r2, #8
 8002574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2204      	movs	r2, #4
 800257a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f898 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 8002590:	e005      	b.n	800259e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f88a 	bl	80026ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f89b 	bl	80026d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d020      	beq.n	80025f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01b      	beq.n	80025f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0210 	mvn.w	r2, #16
 80025c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2208      	movs	r2, #8
 80025c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f872 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 80025dc:	e005      	b.n	80025ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f864 	bl	80026ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f875 	bl	80026d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00c      	beq.n	8002614 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0201 	mvn.w	r2, #1
 800260c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fd ffba 	bl	8000588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00c      	beq.n	8002638 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f936 	bl	80028a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00c      	beq.n	800265c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f92e 	bl	80028b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00c      	beq.n	8002680 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f834 	bl	80026e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00c      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0220 	mvn.w	r2, #32
 800269c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8f6 	bl	8002890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a2a      	ldr	r2, [pc, #168]	@ (80027b8 <TIM_Base_SetConfig+0xbc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d003      	beq.n	800271c <TIM_Base_SetConfig+0x20>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800271a:	d108      	bne.n	800272e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a21      	ldr	r2, [pc, #132]	@ (80027b8 <TIM_Base_SetConfig+0xbc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00b      	beq.n	800274e <TIM_Base_SetConfig+0x52>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800273c:	d007      	beq.n	800274e <TIM_Base_SetConfig+0x52>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1e      	ldr	r2, [pc, #120]	@ (80027bc <TIM_Base_SetConfig+0xc0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d003      	beq.n	800274e <TIM_Base_SetConfig+0x52>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1d      	ldr	r2, [pc, #116]	@ (80027c0 <TIM_Base_SetConfig+0xc4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d108      	bne.n	8002760 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a0c      	ldr	r2, [pc, #48]	@ (80027b8 <TIM_Base_SetConfig+0xbc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d007      	beq.n	800279c <TIM_Base_SetConfig+0xa0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a0b      	ldr	r2, [pc, #44]	@ (80027bc <TIM_Base_SetConfig+0xc0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d003      	beq.n	800279c <TIM_Base_SetConfig+0xa0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <TIM_Base_SetConfig+0xc4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d103      	bne.n	80027a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	615a      	str	r2, [r3, #20]
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40012c00 	.word	0x40012c00
 80027bc:	40014000 	.word	0x40014000
 80027c0:	40014400 	.word	0x40014400

080027c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027d8:	2302      	movs	r3, #2
 80027da:	e04f      	b.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a21      	ldr	r2, [pc, #132]	@ (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d108      	bne.n	8002818 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800280c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800281e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a14      	ldr	r2, [pc, #80]	@ (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d009      	beq.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002844:	d004      	beq.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a10      	ldr	r2, [pc, #64]	@ (800288c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d10c      	bne.n	800286a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002856:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	4313      	orrs	r3, r2
 8002860:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	40012c00 	.word	0x40012c00
 800288c:	40014000 	.word	0x40014000

08002890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e040      	b.n	8002960 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fd ffd4 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	@ 0x24
 80028f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fa54 	bl	8002dc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f825 	bl	8002968 <UART_SetConfig>
 800291e:	4603      	mov	r3, r0
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e01b      	b.n	8002960 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fad3 	bl	8002f04 <UART_CheckIdleState>
 800295e:	4603      	mov	r3, r0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800296c:	b08a      	sub	sp, #40	@ 0x28
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	431a      	orrs	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	431a      	orrs	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4313      	orrs	r3, r2
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4bb4      	ldr	r3, [pc, #720]	@ (8002c68 <UART_SetConfig+0x300>)
 8002998:	4013      	ands	r3, r2
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4aa9      	ldr	r2, [pc, #676]	@ (8002c6c <UART_SetConfig+0x304>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d004      	beq.n	80029d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d0:	4313      	orrs	r3, r2
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e4:	430a      	orrs	r2, r1
 80029e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4aa0      	ldr	r2, [pc, #640]	@ (8002c70 <UART_SetConfig+0x308>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d126      	bne.n	8002a40 <UART_SetConfig+0xd8>
 80029f2:	4ba0      	ldr	r3, [pc, #640]	@ (8002c74 <UART_SetConfig+0x30c>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d81b      	bhi.n	8002a38 <UART_SetConfig+0xd0>
 8002a00:	a201      	add	r2, pc, #4	@ (adr r2, 8002a08 <UART_SetConfig+0xa0>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a29 	.word	0x08002a29
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002a31 	.word	0x08002a31
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a1e:	e080      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002a20:	2302      	movs	r3, #2
 8002a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a26:	e07c      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a2e:	e078      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002a30:	2308      	movs	r3, #8
 8002a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a36:	e074      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002a38:	2310      	movs	r3, #16
 8002a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a3e:	e070      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a8c      	ldr	r2, [pc, #560]	@ (8002c78 <UART_SetConfig+0x310>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d138      	bne.n	8002abc <UART_SetConfig+0x154>
 8002a4a:	4b8a      	ldr	r3, [pc, #552]	@ (8002c74 <UART_SetConfig+0x30c>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b0c      	cmp	r3, #12
 8002a56:	d82d      	bhi.n	8002ab4 <UART_SetConfig+0x14c>
 8002a58:	a201      	add	r2, pc, #4	@ (adr r2, 8002a60 <UART_SetConfig+0xf8>)
 8002a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5e:	bf00      	nop
 8002a60:	08002a95 	.word	0x08002a95
 8002a64:	08002ab5 	.word	0x08002ab5
 8002a68:	08002ab5 	.word	0x08002ab5
 8002a6c:	08002ab5 	.word	0x08002ab5
 8002a70:	08002aa5 	.word	0x08002aa5
 8002a74:	08002ab5 	.word	0x08002ab5
 8002a78:	08002ab5 	.word	0x08002ab5
 8002a7c:	08002ab5 	.word	0x08002ab5
 8002a80:	08002a9d 	.word	0x08002a9d
 8002a84:	08002ab5 	.word	0x08002ab5
 8002a88:	08002ab5 	.word	0x08002ab5
 8002a8c:	08002ab5 	.word	0x08002ab5
 8002a90:	08002aad 	.word	0x08002aad
 8002a94:	2300      	movs	r3, #0
 8002a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9a:	e042      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa2:	e03e      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aaa:	e03a      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002aac:	2308      	movs	r3, #8
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab2:	e036      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002ab4:	2310      	movs	r3, #16
 8002ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aba:	e032      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c6c <UART_SetConfig+0x304>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d12a      	bne.n	8002b1c <UART_SetConfig+0x1b4>
 8002ac6:	4b6b      	ldr	r3, [pc, #428]	@ (8002c74 <UART_SetConfig+0x30c>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002acc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ad0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ad4:	d01a      	beq.n	8002b0c <UART_SetConfig+0x1a4>
 8002ad6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ada:	d81b      	bhi.n	8002b14 <UART_SetConfig+0x1ac>
 8002adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ae0:	d00c      	beq.n	8002afc <UART_SetConfig+0x194>
 8002ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ae6:	d815      	bhi.n	8002b14 <UART_SetConfig+0x1ac>
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <UART_SetConfig+0x18c>
 8002aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af0:	d008      	beq.n	8002b04 <UART_SetConfig+0x19c>
 8002af2:	e00f      	b.n	8002b14 <UART_SetConfig+0x1ac>
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002afa:	e012      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002afc:	2302      	movs	r3, #2
 8002afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b02:	e00e      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002b04:	2304      	movs	r3, #4
 8002b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0a:	e00a      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b12:	e006      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002b14:	2310      	movs	r3, #16
 8002b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b1a:	e002      	b.n	8002b22 <UART_SetConfig+0x1ba>
 8002b1c:	2310      	movs	r3, #16
 8002b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a51      	ldr	r2, [pc, #324]	@ (8002c6c <UART_SetConfig+0x304>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d17a      	bne.n	8002c22 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d824      	bhi.n	8002b7e <UART_SetConfig+0x216>
 8002b34:	a201      	add	r2, pc, #4	@ (adr r2, 8002b3c <UART_SetConfig+0x1d4>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b61 	.word	0x08002b61
 8002b40:	08002b7f 	.word	0x08002b7f
 8002b44:	08002b69 	.word	0x08002b69
 8002b48:	08002b7f 	.word	0x08002b7f
 8002b4c:	08002b6f 	.word	0x08002b6f
 8002b50:	08002b7f 	.word	0x08002b7f
 8002b54:	08002b7f 	.word	0x08002b7f
 8002b58:	08002b7f 	.word	0x08002b7f
 8002b5c:	08002b77 	.word	0x08002b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b60:	f7ff f872 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8002b64:	61f8      	str	r0, [r7, #28]
        break;
 8002b66:	e010      	b.n	8002b8a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b68:	4b44      	ldr	r3, [pc, #272]	@ (8002c7c <UART_SetConfig+0x314>)
 8002b6a:	61fb      	str	r3, [r7, #28]
        break;
 8002b6c:	e00d      	b.n	8002b8a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b6e:	f7fe ffd3 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8002b72:	61f8      	str	r0, [r7, #28]
        break;
 8002b74:	e009      	b.n	8002b8a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b7a:	61fb      	str	r3, [r7, #28]
        break;
 8002b7c:	e005      	b.n	8002b8a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002b88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8107 	beq.w	8002da0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d305      	bcc.n	8002bae <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d903      	bls.n	8002bb6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bb4:	e0f4      	b.n	8002da0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	461c      	mov	r4, r3
 8002bbc:	4615      	mov	r5, r2
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	022b      	lsls	r3, r5, #8
 8002bc8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002bcc:	0222      	lsls	r2, r4, #8
 8002bce:	68f9      	ldr	r1, [r7, #12]
 8002bd0:	6849      	ldr	r1, [r1, #4]
 8002bd2:	0849      	lsrs	r1, r1, #1
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	4688      	mov	r8, r1
 8002bd8:	4681      	mov	r9, r0
 8002bda:	eb12 0a08 	adds.w	sl, r2, r8
 8002bde:	eb43 0b09 	adc.w	fp, r3, r9
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bf0:	4650      	mov	r0, sl
 8002bf2:	4659      	mov	r1, fp
 8002bf4:	f7fd faec 	bl	80001d0 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c06:	d308      	bcc.n	8002c1a <UART_SetConfig+0x2b2>
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c0e:	d204      	bcs.n	8002c1a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	60da      	str	r2, [r3, #12]
 8002c18:	e0c2      	b.n	8002da0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c20:	e0be      	b.n	8002da0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c2a:	d16a      	bne.n	8002d02 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d834      	bhi.n	8002c9e <UART_SetConfig+0x336>
 8002c34:	a201      	add	r2, pc, #4	@ (adr r2, 8002c3c <UART_SetConfig+0x2d4>)
 8002c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3a:	bf00      	nop
 8002c3c:	08002c61 	.word	0x08002c61
 8002c40:	08002c81 	.word	0x08002c81
 8002c44:	08002c89 	.word	0x08002c89
 8002c48:	08002c9f 	.word	0x08002c9f
 8002c4c:	08002c8f 	.word	0x08002c8f
 8002c50:	08002c9f 	.word	0x08002c9f
 8002c54:	08002c9f 	.word	0x08002c9f
 8002c58:	08002c9f 	.word	0x08002c9f
 8002c5c:	08002c97 	.word	0x08002c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c60:	f7fe fff2 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8002c64:	61f8      	str	r0, [r7, #28]
        break;
 8002c66:	e020      	b.n	8002caa <UART_SetConfig+0x342>
 8002c68:	efff69f3 	.word	0xefff69f3
 8002c6c:	40008000 	.word	0x40008000
 8002c70:	40013800 	.word	0x40013800
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40004400 	.word	0x40004400
 8002c7c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c80:	f7fe fff8 	bl	8001c74 <HAL_RCC_GetPCLK2Freq>
 8002c84:	61f8      	str	r0, [r7, #28]
        break;
 8002c86:	e010      	b.n	8002caa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c88:	4b4c      	ldr	r3, [pc, #304]	@ (8002dbc <UART_SetConfig+0x454>)
 8002c8a:	61fb      	str	r3, [r7, #28]
        break;
 8002c8c:	e00d      	b.n	8002caa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c8e:	f7fe ff43 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8002c92:	61f8      	str	r0, [r7, #28]
        break;
 8002c94:	e009      	b.n	8002caa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c9a:	61fb      	str	r3, [r7, #28]
        break;
 8002c9c:	e005      	b.n	8002caa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d077      	beq.n	8002da0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005a      	lsls	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	085b      	lsrs	r3, r3, #1
 8002cba:	441a      	add	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b0f      	cmp	r3, #15
 8002cca:	d916      	bls.n	8002cfa <UART_SetConfig+0x392>
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd2:	d212      	bcs.n	8002cfa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f023 030f 	bic.w	r3, r3, #15
 8002cdc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	8afb      	ldrh	r3, [r7, #22]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	8afa      	ldrh	r2, [r7, #22]
 8002cf6:	60da      	str	r2, [r3, #12]
 8002cf8:	e052      	b.n	8002da0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d00:	e04e      	b.n	8002da0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d02:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d827      	bhi.n	8002d5a <UART_SetConfig+0x3f2>
 8002d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d10 <UART_SetConfig+0x3a8>)
 8002d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d10:	08002d35 	.word	0x08002d35
 8002d14:	08002d3d 	.word	0x08002d3d
 8002d18:	08002d45 	.word	0x08002d45
 8002d1c:	08002d5b 	.word	0x08002d5b
 8002d20:	08002d4b 	.word	0x08002d4b
 8002d24:	08002d5b 	.word	0x08002d5b
 8002d28:	08002d5b 	.word	0x08002d5b
 8002d2c:	08002d5b 	.word	0x08002d5b
 8002d30:	08002d53 	.word	0x08002d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d34:	f7fe ff88 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8002d38:	61f8      	str	r0, [r7, #28]
        break;
 8002d3a:	e014      	b.n	8002d66 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d3c:	f7fe ff9a 	bl	8001c74 <HAL_RCC_GetPCLK2Freq>
 8002d40:	61f8      	str	r0, [r7, #28]
        break;
 8002d42:	e010      	b.n	8002d66 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d44:	4b1d      	ldr	r3, [pc, #116]	@ (8002dbc <UART_SetConfig+0x454>)
 8002d46:	61fb      	str	r3, [r7, #28]
        break;
 8002d48:	e00d      	b.n	8002d66 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d4a:	f7fe fee5 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8002d4e:	61f8      	str	r0, [r7, #28]
        break;
 8002d50:	e009      	b.n	8002d66 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d56:	61fb      	str	r3, [r7, #28]
        break;
 8002d58:	e005      	b.n	8002d66 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d64:	bf00      	nop
    }

    if (pclk != 0U)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d019      	beq.n	8002da0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	085a      	lsrs	r2, r3, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	441a      	add	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b0f      	cmp	r3, #15
 8002d84:	d909      	bls.n	8002d9a <UART_SetConfig+0x432>
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d8c:	d205      	bcs.n	8002d9a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60da      	str	r2, [r3, #12]
 8002d98:	e002      	b.n	8002da0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002dac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3728      	adds	r7, #40	@ 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dba:	bf00      	nop
 8002dbc:	00f42400 	.word	0x00f42400

08002dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01a      	beq.n	8002ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ebe:	d10a      	bne.n	8002ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]
  }
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b098      	sub	sp, #96	@ 0x60
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f14:	f7fd fdbe 	bl	8000a94 <HAL_GetTick>
 8002f18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d12e      	bne.n	8002f86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f30:	2200      	movs	r2, #0
 8002f32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f88c 	bl	8003054 <UART_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d021      	beq.n	8002f86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4a:	e853 3f00 	ldrex	r3, [r3]
 8002f4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f56:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f68:	e841 2300 	strex	r3, r2, [r1]
 8002f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e6      	bne.n	8002f42 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e062      	b.n	800304c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d149      	bne.n	8003028 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f856 	bl	8003054 <UART_WaitOnFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d03c      	beq.n	8003028 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	e853 3f00 	ldrex	r3, [r3]
 8002fba:	623b      	str	r3, [r7, #32]
   return(result);
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fd4:	e841 2300 	strex	r3, r2, [r1]
 8002fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e6      	bne.n	8002fae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3308      	adds	r3, #8
 8002fe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0301 	bic.w	r3, r3, #1
 8002ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3308      	adds	r3, #8
 8002ffe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003000:	61fa      	str	r2, [r7, #28]
 8003002:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003004:	69b9      	ldr	r1, [r7, #24]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	e841 2300 	strex	r3, r2, [r1]
 800300c:	617b      	str	r3, [r7, #20]
   return(result);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e5      	bne.n	8002fe0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e011      	b.n	800304c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3758      	adds	r7, #88	@ 0x58
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	4613      	mov	r3, r2
 8003062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003064:	e049      	b.n	80030fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d045      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fd fd11 	bl	8000a94 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <UART_WaitOnFlagUntilTimeout+0x30>
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e048      	b.n	800311a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d031      	beq.n	80030fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d110      	bne.n	80030c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2208      	movs	r2, #8
 80030aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f838 	bl	8003122 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2208      	movs	r2, #8
 80030b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e029      	b.n	800311a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d4:	d111      	bne.n	80030fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f81e 	bl	8003122 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e00f      	b.n	800311a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4013      	ands	r3, r2
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	429a      	cmp	r2, r3
 8003108:	bf0c      	ite	eq
 800310a:	2301      	moveq	r3, #1
 800310c:	2300      	movne	r3, #0
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461a      	mov	r2, r3
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	429a      	cmp	r2, r3
 8003116:	d0a6      	beq.n	8003066 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003122:	b480      	push	{r7}
 8003124:	b095      	sub	sp, #84	@ 0x54
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800313e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003148:	643b      	str	r3, [r7, #64]	@ 0x40
 800314a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800314e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e6      	bne.n	800312a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3308      	adds	r3, #8
 8003162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	e853 3f00 	ldrex	r3, [r3]
 800316a:	61fb      	str	r3, [r7, #28]
   return(result);
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3308      	adds	r3, #8
 800317a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800317c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800317e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003184:	e841 2300 	strex	r3, r2, [r1]
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e5      	bne.n	800315c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003194:	2b01      	cmp	r3, #1
 8003196:	d118      	bne.n	80031ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f023 0310 	bic.w	r3, r3, #16
 80031ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	6979      	ldr	r1, [r7, #20]
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	613b      	str	r3, [r7, #16]
   return(result);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e6      	bne.n	8003198 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80031de:	bf00      	nop
 80031e0:	3754      	adds	r7, #84	@ 0x54
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <__NVIC_SetPriority>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	6039      	str	r1, [r7, #0]
 80031f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	db0a      	blt.n	8003216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	b2da      	uxtb	r2, r3
 8003204:	490c      	ldr	r1, [pc, #48]	@ (8003238 <__NVIC_SetPriority+0x4c>)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	0112      	lsls	r2, r2, #4
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	440b      	add	r3, r1
 8003210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003214:	e00a      	b.n	800322c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4908      	ldr	r1, [pc, #32]	@ (800323c <__NVIC_SetPriority+0x50>)
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	3b04      	subs	r3, #4
 8003224:	0112      	lsls	r2, r2, #4
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	440b      	add	r3, r1
 800322a:	761a      	strb	r2, [r3, #24]
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	e000e100 	.word	0xe000e100
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003244:	2100      	movs	r1, #0
 8003246:	f06f 0004 	mvn.w	r0, #4
 800324a:	f7ff ffcf 	bl	80031ec <__NVIC_SetPriority>
#endif
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800325a:	f3ef 8305 	mrs	r3, IPSR
 800325e:	603b      	str	r3, [r7, #0]
  return(result);
 8003260:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003266:	f06f 0305 	mvn.w	r3, #5
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	e00c      	b.n	8003288 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800326e:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <osKernelInitialize+0x44>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d105      	bne.n	8003282 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003276:	4b08      	ldr	r3, [pc, #32]	@ (8003298 <osKernelInitialize+0x44>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800327c:	2300      	movs	r3, #0
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	e002      	b.n	8003288 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003282:	f04f 33ff 	mov.w	r3, #4294967295
 8003286:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003288:	687b      	ldr	r3, [r7, #4]
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000108 	.word	0x20000108

0800329c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032a2:	f3ef 8305 	mrs	r3, IPSR
 80032a6:	603b      	str	r3, [r7, #0]
  return(result);
 80032a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80032ae:	f06f 0305 	mvn.w	r3, #5
 80032b2:	607b      	str	r3, [r7, #4]
 80032b4:	e010      	b.n	80032d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80032b6:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <osKernelStart+0x48>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d109      	bne.n	80032d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80032be:	f7ff ffbf 	bl	8003240 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80032c2:	4b08      	ldr	r3, [pc, #32]	@ (80032e4 <osKernelStart+0x48>)
 80032c4:	2202      	movs	r2, #2
 80032c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80032c8:	f001 f87a 	bl	80043c0 <vTaskStartScheduler>
      stat = osOK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	e002      	b.n	80032d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80032d2:	f04f 33ff 	mov.w	r3, #4294967295
 80032d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80032d8:	687b      	ldr	r3, [r7, #4]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000108 	.word	0x20000108

080032e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08e      	sub	sp, #56	@ 0x38
 80032ec:	af04      	add	r7, sp, #16
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032f8:	f3ef 8305 	mrs	r3, IPSR
 80032fc:	617b      	str	r3, [r7, #20]
  return(result);
 80032fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003300:	2b00      	cmp	r3, #0
 8003302:	d17e      	bne.n	8003402 <osThreadNew+0x11a>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d07b      	beq.n	8003402 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800330a:	2380      	movs	r3, #128	@ 0x80
 800330c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800330e:	2318      	movs	r3, #24
 8003310:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003316:	f04f 33ff 	mov.w	r3, #4294967295
 800331a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d045      	beq.n	80033ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <osThreadNew+0x48>
        name = attr->name;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <osThreadNew+0x6e>
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	2b38      	cmp	r3, #56	@ 0x38
 8003348:	d805      	bhi.n	8003356 <osThreadNew+0x6e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <osThreadNew+0x72>
        return (NULL);
 8003356:	2300      	movs	r3, #0
 8003358:	e054      	b.n	8003404 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	089b      	lsrs	r3, r3, #2
 8003368:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00e      	beq.n	8003390 <osThreadNew+0xa8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b5b      	cmp	r3, #91	@ 0x5b
 8003378:	d90a      	bls.n	8003390 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800337e:	2b00      	cmp	r3, #0
 8003380:	d006      	beq.n	8003390 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <osThreadNew+0xa8>
        mem = 1;
 800338a:	2301      	movs	r3, #1
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	e010      	b.n	80033b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10c      	bne.n	80033b2 <osThreadNew+0xca>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d108      	bne.n	80033b2 <osThreadNew+0xca>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d104      	bne.n	80033b2 <osThreadNew+0xca>
          mem = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	e001      	b.n	80033b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d110      	bne.n	80033da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80033c0:	9202      	str	r2, [sp, #8]
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	6a3a      	ldr	r2, [r7, #32]
 80033cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 fe1a 	bl	8004008 <xTaskCreateStatic>
 80033d4:	4603      	mov	r3, r0
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	e013      	b.n	8003402 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d110      	bne.n	8003402 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	f107 0310 	add.w	r3, r7, #16
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fe68 	bl	80040c8 <xTaskCreate>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d001      	beq.n	8003402 <osThreadNew+0x11a>
            hTask = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003402:	693b      	ldr	r3, [r7, #16]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3728      	adds	r7, #40	@ 0x28
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003414:	f3ef 8305 	mrs	r3, IPSR
 8003418:	60bb      	str	r3, [r7, #8]
  return(result);
 800341a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <osDelay+0x1c>
    stat = osErrorISR;
 8003420:	f06f 0305 	mvn.w	r3, #5
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	e007      	b.n	8003438 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 ff8e 	bl	8004354 <vTaskDelay>
    }
  }

  return (stat);
 8003438:	68fb      	ldr	r3, [r7, #12]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4a07      	ldr	r2, [pc, #28]	@ (8003470 <vApplicationGetIdleTaskMemory+0x2c>)
 8003454:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4a06      	ldr	r2, [pc, #24]	@ (8003474 <vApplicationGetIdleTaskMemory+0x30>)
 800345a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2280      	movs	r2, #128	@ 0x80
 8003460:	601a      	str	r2, [r3, #0]
}
 8003462:	bf00      	nop
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	2000010c 	.word	0x2000010c
 8003474:	20000168 	.word	0x20000168

08003478 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4a07      	ldr	r2, [pc, #28]	@ (80034a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003488:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4a06      	ldr	r2, [pc, #24]	@ (80034a8 <vApplicationGetTimerTaskMemory+0x30>)
 800348e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003496:	601a      	str	r2, [r3, #0]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	20000368 	.word	0x20000368
 80034a8:	200003c4 	.word	0x200003c4

080034ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f103 0208 	add.w	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f103 0208 	add.w	r2, r3, #8
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f103 0208 	add.w	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003506:	b480      	push	{r7}
 8003508:	b085      	sub	sp, #20
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	601a      	str	r2, [r3, #0]
}
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800354e:	b480      	push	{r7}
 8003550:	b085      	sub	sp, #20
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
 8003556:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d103      	bne.n	800356e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	e00c      	b.n	8003588 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3308      	adds	r3, #8
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	e002      	b.n	800357c <vListInsert+0x2e>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	d2f6      	bcs.n	8003576 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	601a      	str	r2, [r3, #0]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6892      	ldr	r2, [r2, #8]
 80035d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6852      	ldr	r2, [r2, #4]
 80035e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d103      	bne.n	80035f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	1e5a      	subs	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
 8003638:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	e7fd      	b.n	800363c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003640:	f002 f87a 	bl	8005738 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800364c:	68f9      	ldr	r1, [r7, #12]
 800364e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	441a      	add	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003670:	3b01      	subs	r3, #1
 8003672:	68f9      	ldr	r1, [r7, #12]
 8003674:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	441a      	add	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	22ff      	movs	r2, #255	@ 0xff
 8003684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	22ff      	movs	r2, #255	@ 0xff
 800368c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d114      	bne.n	80036c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01a      	beq.n	80036d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3310      	adds	r3, #16
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 f91a 	bl	80048dc <xTaskRemoveFromEventList>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d012      	beq.n	80036d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036ae:	4b0d      	ldr	r3, [pc, #52]	@ (80036e4 <xQueueGenericReset+0xd0>)
 80036b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	e009      	b.n	80036d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3310      	adds	r3, #16
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fef1 	bl	80034ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	3324      	adds	r3, #36	@ 0x24
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff feec 	bl	80034ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036d4:	f002 f862 	bl	800579c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036d8:	2301      	movs	r3, #1
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	e000ed04 	.word	0xe000ed04

080036e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08e      	sub	sp, #56	@ 0x38
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10b      	bne.n	8003714 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10b      	bne.n	8003732 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	e7fd      	b.n	800372e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <xQueueGenericCreateStatic+0x56>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <xQueueGenericCreateStatic+0x5a>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <xQueueGenericCreateStatic+0x5c>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	623b      	str	r3, [r7, #32]
}
 800375a:	bf00      	nop
 800375c:	bf00      	nop
 800375e:	e7fd      	b.n	800375c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <xQueueGenericCreateStatic+0x84>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d101      	bne.n	8003770 <xQueueGenericCreateStatic+0x88>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <xQueueGenericCreateStatic+0x8a>
 8003770:	2300      	movs	r3, #0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	61fb      	str	r3, [r7, #28]
}
 8003788:	bf00      	nop
 800378a:	bf00      	nop
 800378c:	e7fd      	b.n	800378a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800378e:	2350      	movs	r3, #80	@ 0x50
 8003790:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	2b50      	cmp	r3, #80	@ 0x50
 8003796:	d00b      	beq.n	80037b0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	61bb      	str	r3, [r7, #24]
}
 80037aa:	bf00      	nop
 80037ac:	bf00      	nop
 80037ae:	e7fd      	b.n	80037ac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80037b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00d      	beq.n	80037d8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037c4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80037c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f805 	bl	80037e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80037da:	4618      	mov	r0, r3
 80037dc:	3730      	adds	r7, #48	@ 0x30
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e002      	b.n	8003804 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003810:	2101      	movs	r1, #1
 8003812:	69b8      	ldr	r0, [r7, #24]
 8003814:	f7ff fefe 	bl	8003614 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08e      	sub	sp, #56	@ 0x38
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003836:	2300      	movs	r3, #0
 8003838:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <xQueueGenericSend+0x34>
	__asm volatile
 8003844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003856:	bf00      	nop
 8003858:	bf00      	nop
 800385a:	e7fd      	b.n	8003858 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <xQueueGenericSend+0x42>
 8003862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <xQueueGenericSend+0x46>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <xQueueGenericSend+0x48>
 800386e:	2300      	movs	r3, #0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10b      	bne.n	800388c <xQueueGenericSend+0x64>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003886:	bf00      	nop
 8003888:	bf00      	nop
 800388a:	e7fd      	b.n	8003888 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d103      	bne.n	800389a <xQueueGenericSend+0x72>
 8003892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <xQueueGenericSend+0x76>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <xQueueGenericSend+0x78>
 800389e:	2300      	movs	r3, #0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <xQueueGenericSend+0x94>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	623b      	str	r3, [r7, #32]
}
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	e7fd      	b.n	80038b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038bc:	f001 f9ce 	bl	8004c5c <xTaskGetSchedulerState>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <xQueueGenericSend+0xa4>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <xQueueGenericSend+0xa8>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <xQueueGenericSend+0xaa>
 80038d0:	2300      	movs	r3, #0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10b      	bne.n	80038ee <xQueueGenericSend+0xc6>
	__asm volatile
 80038d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	61fb      	str	r3, [r7, #28]
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	e7fd      	b.n	80038ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038ee:	f001 ff23 	bl	8005738 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d302      	bcc.n	8003904 <xQueueGenericSend+0xdc>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d129      	bne.n	8003958 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800390a:	f000 fa0f 	bl	8003d2c <prvCopyDataToQueue>
 800390e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	2b00      	cmp	r3, #0
 8003916:	d010      	beq.n	800393a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391a:	3324      	adds	r3, #36	@ 0x24
 800391c:	4618      	mov	r0, r3
 800391e:	f000 ffdd 	bl	80048dc <xTaskRemoveFromEventList>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d013      	beq.n	8003950 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003928:	4b3f      	ldr	r3, [pc, #252]	@ (8003a28 <xQueueGenericSend+0x200>)
 800392a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	e00a      	b.n	8003950 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800393a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d007      	beq.n	8003950 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003940:	4b39      	ldr	r3, [pc, #228]	@ (8003a28 <xQueueGenericSend+0x200>)
 8003942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003950:	f001 ff24 	bl	800579c <vPortExitCritical>
				return pdPASS;
 8003954:	2301      	movs	r3, #1
 8003956:	e063      	b.n	8003a20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d103      	bne.n	8003966 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800395e:	f001 ff1d 	bl	800579c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003962:	2300      	movs	r3, #0
 8003964:	e05c      	b.n	8003a20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003968:	2b00      	cmp	r3, #0
 800396a:	d106      	bne.n	800397a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800396c:	f107 0314 	add.w	r3, r7, #20
 8003970:	4618      	mov	r0, r3
 8003972:	f001 f817 	bl	80049a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003976:	2301      	movs	r3, #1
 8003978:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800397a:	f001 ff0f 	bl	800579c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800397e:	f000 fd87 	bl	8004490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003982:	f001 fed9 	bl	8005738 <vPortEnterCritical>
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003988:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800398c:	b25b      	sxtb	r3, r3
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d103      	bne.n	800399c <xQueueGenericSend+0x174>
 8003994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800399c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039a2:	b25b      	sxtb	r3, r3
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d103      	bne.n	80039b2 <xQueueGenericSend+0x18a>
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039b2:	f001 fef3 	bl	800579c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039b6:	1d3a      	adds	r2, r7, #4
 80039b8:	f107 0314 	add.w	r3, r7, #20
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f001 f806 	bl	80049d0 <xTaskCheckForTimeOut>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d124      	bne.n	8003a14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039cc:	f000 faa6 	bl	8003f1c <prvIsQueueFull>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d018      	beq.n	8003a08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d8:	3310      	adds	r3, #16
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4611      	mov	r1, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 ff2a 	bl	8004838 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039e6:	f000 fa31 	bl	8003e4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039ea:	f000 fd5f 	bl	80044ac <xTaskResumeAll>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f47f af7c 	bne.w	80038ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80039f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003a28 <xQueueGenericSend+0x200>)
 80039f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	e772      	b.n	80038ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a0a:	f000 fa1f 	bl	8003e4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a0e:	f000 fd4d 	bl	80044ac <xTaskResumeAll>
 8003a12:	e76c      	b.n	80038ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a16:	f000 fa19 	bl	8003e4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a1a:	f000 fd47 	bl	80044ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3738      	adds	r7, #56	@ 0x38
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	e000ed04 	.word	0xe000ed04

08003a2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b090      	sub	sp, #64	@ 0x40
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10b      	bne.n	8003a5c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a56:	bf00      	nop
 8003a58:	bf00      	nop
 8003a5a:	e7fd      	b.n	8003a58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <xQueueGenericSendFromISR+0x3e>
 8003a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <xQueueGenericSendFromISR+0x42>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <xQueueGenericSendFromISR+0x44>
 8003a6e:	2300      	movs	r3, #0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d103      	bne.n	8003a9a <xQueueGenericSendFromISR+0x6e>
 8003a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <xQueueGenericSendFromISR+0x72>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <xQueueGenericSendFromISR+0x74>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	623b      	str	r3, [r7, #32]
}
 8003ab6:	bf00      	nop
 8003ab8:	bf00      	nop
 8003aba:	e7fd      	b.n	8003ab8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003abc:	f001 ff1c 	bl	80058f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ac0:	f3ef 8211 	mrs	r2, BASEPRI
 8003ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	61fa      	str	r2, [r7, #28]
 8003ad6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ada:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d302      	bcc.n	8003aee <xQueueGenericSendFromISR+0xc2>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d12f      	bne.n	8003b4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003af4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	68b9      	ldr	r1, [r7, #8]
 8003b02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b04:	f000 f912 	bl	8003d2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d112      	bne.n	8003b38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1c:	3324      	adds	r3, #36	@ 0x24
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fedc 	bl	80048dc <xTaskRemoveFromEventList>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00b      	beq.n	8003b48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e007      	b.n	8003b48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	b25a      	sxtb	r2, r3
 8003b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003b4c:	e001      	b.n	8003b52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3740      	adds	r7, #64	@ 0x40
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08c      	sub	sp, #48	@ 0x30
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10b      	bne.n	8003b9a <xQueueReceive+0x32>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	623b      	str	r3, [r7, #32]
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	e7fd      	b.n	8003b96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <xQueueReceive+0x40>
 8003ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <xQueueReceive+0x44>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <xQueueReceive+0x46>
 8003bac:	2300      	movs	r3, #0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <xQueueReceive+0x62>
	__asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	61fb      	str	r3, [r7, #28]
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	e7fd      	b.n	8003bc6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bca:	f001 f847 	bl	8004c5c <xTaskGetSchedulerState>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <xQueueReceive+0x72>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <xQueueReceive+0x76>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <xQueueReceive+0x78>
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <xQueueReceive+0x94>
	__asm volatile
 8003be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	61bb      	str	r3, [r7, #24]
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bfc:	f001 fd9c 	bl	8005738 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01f      	beq.n	8003c4c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c10:	f000 f8f6 	bl	8003e00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c16:	1e5a      	subs	r2, r3, #1
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00f      	beq.n	8003c44 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c26:	3310      	adds	r3, #16
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fe57 	bl	80048dc <xTaskRemoveFromEventList>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c34:	4b3c      	ldr	r3, [pc, #240]	@ (8003d28 <xQueueReceive+0x1c0>)
 8003c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c3a:	601a      	str	r2, [r3, #0]
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c44:	f001 fdaa 	bl	800579c <vPortExitCritical>
				return pdPASS;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e069      	b.n	8003d20 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c52:	f001 fda3 	bl	800579c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e062      	b.n	8003d20 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d106      	bne.n	8003c6e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c60:	f107 0310 	add.w	r3, r7, #16
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 fe9d 	bl	80049a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c6e:	f001 fd95 	bl	800579c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c72:	f000 fc0d 	bl	8004490 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c76:	f001 fd5f 	bl	8005738 <vPortEnterCritical>
 8003c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c80:	b25b      	sxtb	r3, r3
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	d103      	bne.n	8003c90 <xQueueReceive+0x128>
 8003c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c96:	b25b      	sxtb	r3, r3
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d103      	bne.n	8003ca6 <xQueueReceive+0x13e>
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ca6:	f001 fd79 	bl	800579c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003caa:	1d3a      	adds	r2, r7, #4
 8003cac:	f107 0310 	add.w	r3, r7, #16
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fe8c 	bl	80049d0 <xTaskCheckForTimeOut>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d123      	bne.n	8003d06 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cc0:	f000 f916 	bl	8003ef0 <prvIsQueueEmpty>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d017      	beq.n	8003cfa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	3324      	adds	r3, #36	@ 0x24
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fdb0 	bl	8004838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cda:	f000 f8b7 	bl	8003e4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cde:	f000 fbe5 	bl	80044ac <xTaskResumeAll>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d189      	bne.n	8003bfc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8003d28 <xQueueReceive+0x1c0>)
 8003cea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	e780      	b.n	8003bfc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cfc:	f000 f8a6 	bl	8003e4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d00:	f000 fbd4 	bl	80044ac <xTaskResumeAll>
 8003d04:	e77a      	b.n	8003bfc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d08:	f000 f8a0 	bl	8003e4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d0c:	f000 fbce 	bl	80044ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d12:	f000 f8ed 	bl	8003ef0 <prvIsQueueEmpty>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f43f af6f 	beq.w	8003bfc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3730      	adds	r7, #48	@ 0x30
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10d      	bne.n	8003d66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d14d      	bne.n	8003dee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 ff9e 	bl	8004c98 <xTaskPriorityDisinherit>
 8003d5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	e043      	b.n	8003dee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d119      	bne.n	8003da0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6858      	ldr	r0, [r3, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	461a      	mov	r2, r3
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	f002 f81a 	bl	8005db0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d84:	441a      	add	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d32b      	bcc.n	8003dee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	e026      	b.n	8003dee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	68d8      	ldr	r0, [r3, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da8:	461a      	mov	r2, r3
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	f002 f800 	bl	8005db0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	425b      	negs	r3, r3
 8003dba:	441a      	add	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d207      	bcs.n	8003ddc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	425b      	negs	r3, r3
 8003dd6:	441a      	add	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d105      	bne.n	8003dee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003df6:	697b      	ldr	r3, [r7, #20]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d018      	beq.n	8003e44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	441a      	add	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d303      	bcc.n	8003e34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68d9      	ldr	r1, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6838      	ldr	r0, [r7, #0]
 8003e40:	f001 ffb6 	bl	8005db0 <memcpy>
	}
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e54:	f001 fc70 	bl	8005738 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e60:	e011      	b.n	8003e86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d012      	beq.n	8003e90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	3324      	adds	r3, #36	@ 0x24
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fd34 	bl	80048dc <xTaskRemoveFromEventList>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e7a:	f000 fe0d 	bl	8004a98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	dce9      	bgt.n	8003e62 <prvUnlockQueue+0x16>
 8003e8e:	e000      	b.n	8003e92 <prvUnlockQueue+0x46>
					break;
 8003e90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	22ff      	movs	r2, #255	@ 0xff
 8003e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003e9a:	f001 fc7f 	bl	800579c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e9e:	f001 fc4b 	bl	8005738 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ea8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eaa:	e011      	b.n	8003ed0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d012      	beq.n	8003eda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3310      	adds	r3, #16
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fd0f 	bl	80048dc <xTaskRemoveFromEventList>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ec4:	f000 fde8 	bl	8004a98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ec8:	7bbb      	ldrb	r3, [r7, #14]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	dce9      	bgt.n	8003eac <prvUnlockQueue+0x60>
 8003ed8:	e000      	b.n	8003edc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003eda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	22ff      	movs	r2, #255	@ 0xff
 8003ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003ee4:	f001 fc5a 	bl	800579c <vPortExitCritical>
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ef8:	f001 fc1e 	bl	8005738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	e001      	b.n	8003f0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f0e:	f001 fc45 	bl	800579c <vPortExitCritical>

	return xReturn;
 8003f12:	68fb      	ldr	r3, [r7, #12]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f24:	f001 fc08 	bl	8005738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d102      	bne.n	8003f3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	e001      	b.n	8003f3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f3e:	f001 fc2d 	bl	800579c <vPortExitCritical>

	return xReturn;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e014      	b.n	8003f86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f5c:	4a0f      	ldr	r2, [pc, #60]	@ (8003f9c <vQueueAddToRegistry+0x50>)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10b      	bne.n	8003f80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f68:	490c      	ldr	r1, [pc, #48]	@ (8003f9c <vQueueAddToRegistry+0x50>)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f72:	4a0a      	ldr	r2, [pc, #40]	@ (8003f9c <vQueueAddToRegistry+0x50>)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4413      	add	r3, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f7e:	e006      	b.n	8003f8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3301      	adds	r3, #1
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b07      	cmp	r3, #7
 8003f8a:	d9e7      	bls.n	8003f5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	200007c4 	.word	0x200007c4

08003fa0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fb0:	f001 fbc2 	bl	8005738 <vPortEnterCritical>
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fba:	b25b      	sxtb	r3, r3
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d103      	bne.n	8003fca <vQueueWaitForMessageRestricted+0x2a>
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fd0:	b25b      	sxtb	r3, r3
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d103      	bne.n	8003fe0 <vQueueWaitForMessageRestricted+0x40>
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fe0:	f001 fbdc 	bl	800579c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d106      	bne.n	8003ffa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	3324      	adds	r3, #36	@ 0x24
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fc45 	bl	8004884 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ffa:	6978      	ldr	r0, [r7, #20]
 8003ffc:	f7ff ff26 	bl	8003e4c <prvUnlockQueue>
	}
 8004000:	bf00      	nop
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08e      	sub	sp, #56	@ 0x38
 800400c:	af04      	add	r7, sp, #16
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <xTaskCreateStatic+0x2c>
	__asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	623b      	str	r3, [r7, #32]
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10b      	bne.n	8004052 <xTaskCreateStatic+0x4a>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	61fb      	str	r3, [r7, #28]
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	e7fd      	b.n	800404e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004052:	235c      	movs	r3, #92	@ 0x5c
 8004054:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b5c      	cmp	r3, #92	@ 0x5c
 800405a:	d00b      	beq.n	8004074 <xTaskCreateStatic+0x6c>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	61bb      	str	r3, [r7, #24]
}
 800406e:	bf00      	nop
 8004070:	bf00      	nop
 8004072:	e7fd      	b.n	8004070 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004074:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01e      	beq.n	80040ba <xTaskCreateStatic+0xb2>
 800407c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01b      	beq.n	80040ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004084:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800408a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	2202      	movs	r2, #2
 8004090:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004094:	2300      	movs	r3, #0
 8004096:	9303      	str	r3, [sp, #12]
 8004098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409a:	9302      	str	r3, [sp, #8]
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f850 	bl	8004152 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040b4:	f000 f8de 	bl	8004274 <prvAddNewTaskToReadyList>
 80040b8:	e001      	b.n	80040be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80040be:	697b      	ldr	r3, [r7, #20]
	}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3728      	adds	r7, #40	@ 0x28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08c      	sub	sp, #48	@ 0x30
 80040cc:	af04      	add	r7, sp, #16
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 fc4d 	bl	800597c <pvPortMalloc>
 80040e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00e      	beq.n	8004108 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040ea:	205c      	movs	r0, #92	@ 0x5c
 80040ec:	f001 fc46 	bl	800597c <pvPortMalloc>
 80040f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80040fe:	e005      	b.n	800410c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004100:	6978      	ldr	r0, [r7, #20]
 8004102:	f001 fd09 	bl	8005b18 <vPortFree>
 8004106:	e001      	b.n	800410c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004108:	2300      	movs	r3, #0
 800410a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d017      	beq.n	8004142 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800411a:	88fa      	ldrh	r2, [r7, #6]
 800411c:	2300      	movs	r3, #0
 800411e:	9303      	str	r3, [sp, #12]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	9302      	str	r3, [sp, #8]
 8004124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004126:	9301      	str	r3, [sp, #4]
 8004128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f80e 	bl	8004152 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004136:	69f8      	ldr	r0, [r7, #28]
 8004138:	f000 f89c 	bl	8004274 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800413c:	2301      	movs	r3, #1
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	e002      	b.n	8004148 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004142:	f04f 33ff 	mov.w	r3, #4294967295
 8004146:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004148:	69bb      	ldr	r3, [r7, #24]
	}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b088      	sub	sp, #32
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	607a      	str	r2, [r7, #4]
 800415e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	461a      	mov	r2, r3
 800416a:	21a5      	movs	r1, #165	@ 0xa5
 800416c:	f001 fdf4 	bl	8005d58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800417a:	3b01      	subs	r3, #1
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f023 0307 	bic.w	r3, r3, #7
 8004188:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	617b      	str	r3, [r7, #20]
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01f      	beq.n	80041f2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
 80041b6:	e012      	b.n	80041de <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4413      	add	r3, r2
 80041be:	7819      	ldrb	r1, [r3, #0]
 80041c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4413      	add	r3, r2
 80041c6:	3334      	adds	r3, #52	@ 0x34
 80041c8:	460a      	mov	r2, r1
 80041ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d006      	beq.n	80041e6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	3301      	adds	r3, #1
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b0f      	cmp	r3, #15
 80041e2:	d9e9      	bls.n	80041b8 <prvInitialiseNewTask+0x66>
 80041e4:	e000      	b.n	80041e8 <prvInitialiseNewTask+0x96>
			{
				break;
 80041e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041f0:	e003      	b.n	80041fa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fc:	2b37      	cmp	r3, #55	@ 0x37
 80041fe:	d901      	bls.n	8004204 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004200:	2337      	movs	r3, #55	@ 0x37
 8004202:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004208:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800420a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800420e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004212:	2200      	movs	r2, #0
 8004214:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004218:	3304      	adds	r3, #4
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff f966 	bl	80034ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004222:	3318      	adds	r3, #24
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff f961 	bl	80034ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800422e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004232:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800423e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004242:	2200      	movs	r2, #0
 8004244:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800424e:	683a      	ldr	r2, [r7, #0]
 8004250:	68f9      	ldr	r1, [r7, #12]
 8004252:	69b8      	ldr	r0, [r7, #24]
 8004254:	f001 f93e 	bl	80054d4 <pxPortInitialiseStack>
 8004258:	4602      	mov	r2, r0
 800425a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800425e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004268:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800426a:	bf00      	nop
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800427c:	f001 fa5c 	bl	8005738 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004280:	4b2d      	ldr	r3, [pc, #180]	@ (8004338 <prvAddNewTaskToReadyList+0xc4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3301      	adds	r3, #1
 8004286:	4a2c      	ldr	r2, [pc, #176]	@ (8004338 <prvAddNewTaskToReadyList+0xc4>)
 8004288:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800428a:	4b2c      	ldr	r3, [pc, #176]	@ (800433c <prvAddNewTaskToReadyList+0xc8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004292:	4a2a      	ldr	r2, [pc, #168]	@ (800433c <prvAddNewTaskToReadyList+0xc8>)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004298:	4b27      	ldr	r3, [pc, #156]	@ (8004338 <prvAddNewTaskToReadyList+0xc4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d110      	bne.n	80042c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042a0:	f000 fc1e 	bl	8004ae0 <prvInitialiseTaskLists>
 80042a4:	e00d      	b.n	80042c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80042a6:	4b26      	ldr	r3, [pc, #152]	@ (8004340 <prvAddNewTaskToReadyList+0xcc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80042ae:	4b23      	ldr	r3, [pc, #140]	@ (800433c <prvAddNewTaskToReadyList+0xc8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d802      	bhi.n	80042c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80042bc:	4a1f      	ldr	r2, [pc, #124]	@ (800433c <prvAddNewTaskToReadyList+0xc8>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80042c2:	4b20      	ldr	r3, [pc, #128]	@ (8004344 <prvAddNewTaskToReadyList+0xd0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3301      	adds	r3, #1
 80042c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004344 <prvAddNewTaskToReadyList+0xd0>)
 80042ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80042cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004344 <prvAddNewTaskToReadyList+0xd0>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <prvAddNewTaskToReadyList+0xd4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d903      	bls.n	80042e8 <prvAddNewTaskToReadyList+0x74>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	4a18      	ldr	r2, [pc, #96]	@ (8004348 <prvAddNewTaskToReadyList+0xd4>)
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4a15      	ldr	r2, [pc, #84]	@ (800434c <prvAddNewTaskToReadyList+0xd8>)
 80042f6:	441a      	add	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3304      	adds	r3, #4
 80042fc:	4619      	mov	r1, r3
 80042fe:	4610      	mov	r0, r2
 8004300:	f7ff f901 	bl	8003506 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004304:	f001 fa4a 	bl	800579c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004308:	4b0d      	ldr	r3, [pc, #52]	@ (8004340 <prvAddNewTaskToReadyList+0xcc>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00e      	beq.n	800432e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004310:	4b0a      	ldr	r3, [pc, #40]	@ (800433c <prvAddNewTaskToReadyList+0xc8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431a:	429a      	cmp	r2, r3
 800431c:	d207      	bcs.n	800432e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800431e:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <prvAddNewTaskToReadyList+0xdc>)
 8004320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000cd8 	.word	0x20000cd8
 800433c:	20000804 	.word	0x20000804
 8004340:	20000ce4 	.word	0x20000ce4
 8004344:	20000cf4 	.word	0x20000cf4
 8004348:	20000ce0 	.word	0x20000ce0
 800434c:	20000808 	.word	0x20000808
 8004350:	e000ed04 	.word	0xe000ed04

08004354 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d018      	beq.n	8004398 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004366:	4b14      	ldr	r3, [pc, #80]	@ (80043b8 <vTaskDelay+0x64>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00b      	beq.n	8004386 <vTaskDelay+0x32>
	__asm volatile
 800436e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004372:	f383 8811 	msr	BASEPRI, r3
 8004376:	f3bf 8f6f 	isb	sy
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	60bb      	str	r3, [r7, #8]
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	e7fd      	b.n	8004382 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004386:	f000 f883 	bl	8004490 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800438a:	2100      	movs	r1, #0
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fcf3 	bl	8004d78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004392:	f000 f88b 	bl	80044ac <xTaskResumeAll>
 8004396:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d107      	bne.n	80043ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800439e:	4b07      	ldr	r3, [pc, #28]	@ (80043bc <vTaskDelay+0x68>)
 80043a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000d00 	.word	0x20000d00
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	@ 0x28
 80043c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80043ce:	463a      	mov	r2, r7
 80043d0:	1d39      	adds	r1, r7, #4
 80043d2:	f107 0308 	add.w	r3, r7, #8
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff f834 	bl	8003444 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80043dc:	6839      	ldr	r1, [r7, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	9202      	str	r2, [sp, #8]
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	2300      	movs	r3, #0
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	2300      	movs	r3, #0
 80043ec:	460a      	mov	r2, r1
 80043ee:	4922      	ldr	r1, [pc, #136]	@ (8004478 <vTaskStartScheduler+0xb8>)
 80043f0:	4822      	ldr	r0, [pc, #136]	@ (800447c <vTaskStartScheduler+0xbc>)
 80043f2:	f7ff fe09 	bl	8004008 <xTaskCreateStatic>
 80043f6:	4603      	mov	r3, r0
 80043f8:	4a21      	ldr	r2, [pc, #132]	@ (8004480 <vTaskStartScheduler+0xc0>)
 80043fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80043fc:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <vTaskStartScheduler+0xc0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004404:	2301      	movs	r3, #1
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	e001      	b.n	800440e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d102      	bne.n	800441a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004414:	f000 fd04 	bl	8004e20 <xTimerCreateTimerTask>
 8004418:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d116      	bne.n	800444e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	613b      	str	r3, [r7, #16]
}
 8004432:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004434:	4b13      	ldr	r3, [pc, #76]	@ (8004484 <vTaskStartScheduler+0xc4>)
 8004436:	f04f 32ff 	mov.w	r2, #4294967295
 800443a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800443c:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <vTaskStartScheduler+0xc8>)
 800443e:	2201      	movs	r2, #1
 8004440:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004442:	4b12      	ldr	r3, [pc, #72]	@ (800448c <vTaskStartScheduler+0xcc>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004448:	f001 f8d2 	bl	80055f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800444c:	e00f      	b.n	800446e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004454:	d10b      	bne.n	800446e <vTaskStartScheduler+0xae>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	60fb      	str	r3, [r7, #12]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <vTaskStartScheduler+0xaa>
}
 800446e:	bf00      	nop
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	08005df0 	.word	0x08005df0
 800447c:	08004ab1 	.word	0x08004ab1
 8004480:	20000cfc 	.word	0x20000cfc
 8004484:	20000cf8 	.word	0x20000cf8
 8004488:	20000ce4 	.word	0x20000ce4
 800448c:	20000cdc 	.word	0x20000cdc

08004490 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004494:	4b04      	ldr	r3, [pc, #16]	@ (80044a8 <vTaskSuspendAll+0x18>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3301      	adds	r3, #1
 800449a:	4a03      	ldr	r2, [pc, #12]	@ (80044a8 <vTaskSuspendAll+0x18>)
 800449c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800449e:	bf00      	nop
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	20000d00 	.word	0x20000d00

080044ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80044ba:	4b42      	ldr	r3, [pc, #264]	@ (80045c4 <xTaskResumeAll+0x118>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <xTaskResumeAll+0x2e>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	603b      	str	r3, [r7, #0]
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80044da:	f001 f92d 	bl	8005738 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80044de:	4b39      	ldr	r3, [pc, #228]	@ (80045c4 <xTaskResumeAll+0x118>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	4a37      	ldr	r2, [pc, #220]	@ (80045c4 <xTaskResumeAll+0x118>)
 80044e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e8:	4b36      	ldr	r3, [pc, #216]	@ (80045c4 <xTaskResumeAll+0x118>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d162      	bne.n	80045b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044f0:	4b35      	ldr	r3, [pc, #212]	@ (80045c8 <xTaskResumeAll+0x11c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d05e      	beq.n	80045b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044f8:	e02f      	b.n	800455a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044fa:	4b34      	ldr	r3, [pc, #208]	@ (80045cc <xTaskResumeAll+0x120>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3318      	adds	r3, #24
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff f85a 	bl	80035c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3304      	adds	r3, #4
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff f855 	bl	80035c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451a:	4b2d      	ldr	r3, [pc, #180]	@ (80045d0 <xTaskResumeAll+0x124>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d903      	bls.n	800452a <xTaskResumeAll+0x7e>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004526:	4a2a      	ldr	r2, [pc, #168]	@ (80045d0 <xTaskResumeAll+0x124>)
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4a27      	ldr	r2, [pc, #156]	@ (80045d4 <xTaskResumeAll+0x128>)
 8004538:	441a      	add	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f7fe ffe0 	bl	8003506 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800454a:	4b23      	ldr	r3, [pc, #140]	@ (80045d8 <xTaskResumeAll+0x12c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004550:	429a      	cmp	r2, r3
 8004552:	d302      	bcc.n	800455a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004554:	4b21      	ldr	r3, [pc, #132]	@ (80045dc <xTaskResumeAll+0x130>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800455a:	4b1c      	ldr	r3, [pc, #112]	@ (80045cc <xTaskResumeAll+0x120>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1cb      	bne.n	80044fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004568:	f000 fb58 	bl	8004c1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800456c:	4b1c      	ldr	r3, [pc, #112]	@ (80045e0 <xTaskResumeAll+0x134>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d010      	beq.n	800459a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004578:	f000 f846 	bl	8004608 <xTaskIncrementTick>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004582:	4b16      	ldr	r3, [pc, #88]	@ (80045dc <xTaskResumeAll+0x130>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	3b01      	subs	r3, #1
 800458c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f1      	bne.n	8004578 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004594:	4b12      	ldr	r3, [pc, #72]	@ (80045e0 <xTaskResumeAll+0x134>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800459a:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <xTaskResumeAll+0x130>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045a2:	2301      	movs	r3, #1
 80045a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045a6:	4b0f      	ldr	r3, [pc, #60]	@ (80045e4 <xTaskResumeAll+0x138>)
 80045a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045b6:	f001 f8f1 	bl	800579c <vPortExitCritical>

	return xAlreadyYielded;
 80045ba:	68bb      	ldr	r3, [r7, #8]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20000d00 	.word	0x20000d00
 80045c8:	20000cd8 	.word	0x20000cd8
 80045cc:	20000c98 	.word	0x20000c98
 80045d0:	20000ce0 	.word	0x20000ce0
 80045d4:	20000808 	.word	0x20000808
 80045d8:	20000804 	.word	0x20000804
 80045dc:	20000cec 	.word	0x20000cec
 80045e0:	20000ce8 	.word	0x20000ce8
 80045e4:	e000ed04 	.word	0xe000ed04

080045e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045ee:	4b05      	ldr	r3, [pc, #20]	@ (8004604 <xTaskGetTickCount+0x1c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045f4:	687b      	ldr	r3, [r7, #4]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000cdc 	.word	0x20000cdc

08004608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004612:	4b4f      	ldr	r3, [pc, #316]	@ (8004750 <xTaskIncrementTick+0x148>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f040 8090 	bne.w	800473c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800461c:	4b4d      	ldr	r3, [pc, #308]	@ (8004754 <xTaskIncrementTick+0x14c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3301      	adds	r3, #1
 8004622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004624:	4a4b      	ldr	r2, [pc, #300]	@ (8004754 <xTaskIncrementTick+0x14c>)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d121      	bne.n	8004674 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004630:	4b49      	ldr	r3, [pc, #292]	@ (8004758 <xTaskIncrementTick+0x150>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <xTaskIncrementTick+0x4a>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	603b      	str	r3, [r7, #0]
}
 800464c:	bf00      	nop
 800464e:	bf00      	nop
 8004650:	e7fd      	b.n	800464e <xTaskIncrementTick+0x46>
 8004652:	4b41      	ldr	r3, [pc, #260]	@ (8004758 <xTaskIncrementTick+0x150>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	4b40      	ldr	r3, [pc, #256]	@ (800475c <xTaskIncrementTick+0x154>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a3e      	ldr	r2, [pc, #248]	@ (8004758 <xTaskIncrementTick+0x150>)
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	4a3e      	ldr	r2, [pc, #248]	@ (800475c <xTaskIncrementTick+0x154>)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	4b3e      	ldr	r3, [pc, #248]	@ (8004760 <xTaskIncrementTick+0x158>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3301      	adds	r3, #1
 800466c:	4a3c      	ldr	r2, [pc, #240]	@ (8004760 <xTaskIncrementTick+0x158>)
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	f000 fad4 	bl	8004c1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004674:	4b3b      	ldr	r3, [pc, #236]	@ (8004764 <xTaskIncrementTick+0x15c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	429a      	cmp	r2, r3
 800467c:	d349      	bcc.n	8004712 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800467e:	4b36      	ldr	r3, [pc, #216]	@ (8004758 <xTaskIncrementTick+0x150>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004688:	4b36      	ldr	r3, [pc, #216]	@ (8004764 <xTaskIncrementTick+0x15c>)
 800468a:	f04f 32ff 	mov.w	r2, #4294967295
 800468e:	601a      	str	r2, [r3, #0]
					break;
 8004690:	e03f      	b.n	8004712 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004692:	4b31      	ldr	r3, [pc, #196]	@ (8004758 <xTaskIncrementTick+0x150>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d203      	bcs.n	80046b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046aa:	4a2e      	ldr	r2, [pc, #184]	@ (8004764 <xTaskIncrementTick+0x15c>)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046b0:	e02f      	b.n	8004712 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe ff82 	bl	80035c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	3318      	adds	r3, #24
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe ff79 	bl	80035c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d2:	4b25      	ldr	r3, [pc, #148]	@ (8004768 <xTaskIncrementTick+0x160>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d903      	bls.n	80046e2 <xTaskIncrementTick+0xda>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	4a22      	ldr	r2, [pc, #136]	@ (8004768 <xTaskIncrementTick+0x160>)
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e6:	4613      	mov	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4a1f      	ldr	r2, [pc, #124]	@ (800476c <xTaskIncrementTick+0x164>)
 80046f0:	441a      	add	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4619      	mov	r1, r3
 80046f8:	4610      	mov	r0, r2
 80046fa:	f7fe ff04 	bl	8003506 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004702:	4b1b      	ldr	r3, [pc, #108]	@ (8004770 <xTaskIncrementTick+0x168>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004708:	429a      	cmp	r2, r3
 800470a:	d3b8      	bcc.n	800467e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800470c:	2301      	movs	r3, #1
 800470e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004710:	e7b5      	b.n	800467e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004712:	4b17      	ldr	r3, [pc, #92]	@ (8004770 <xTaskIncrementTick+0x168>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004718:	4914      	ldr	r1, [pc, #80]	@ (800476c <xTaskIncrementTick+0x164>)
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d901      	bls.n	800472e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800472a:	2301      	movs	r3, #1
 800472c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800472e:	4b11      	ldr	r3, [pc, #68]	@ (8004774 <xTaskIncrementTick+0x16c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e004      	b.n	8004746 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800473c:	4b0e      	ldr	r3, [pc, #56]	@ (8004778 <xTaskIncrementTick+0x170>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3301      	adds	r3, #1
 8004742:	4a0d      	ldr	r2, [pc, #52]	@ (8004778 <xTaskIncrementTick+0x170>)
 8004744:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004746:	697b      	ldr	r3, [r7, #20]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000d00 	.word	0x20000d00
 8004754:	20000cdc 	.word	0x20000cdc
 8004758:	20000c90 	.word	0x20000c90
 800475c:	20000c94 	.word	0x20000c94
 8004760:	20000cf0 	.word	0x20000cf0
 8004764:	20000cf8 	.word	0x20000cf8
 8004768:	20000ce0 	.word	0x20000ce0
 800476c:	20000808 	.word	0x20000808
 8004770:	20000804 	.word	0x20000804
 8004774:	20000cec 	.word	0x20000cec
 8004778:	20000ce8 	.word	0x20000ce8

0800477c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004782:	4b28      	ldr	r3, [pc, #160]	@ (8004824 <vTaskSwitchContext+0xa8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800478a:	4b27      	ldr	r3, [pc, #156]	@ (8004828 <vTaskSwitchContext+0xac>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004790:	e042      	b.n	8004818 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004792:	4b25      	ldr	r3, [pc, #148]	@ (8004828 <vTaskSwitchContext+0xac>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004798:	4b24      	ldr	r3, [pc, #144]	@ (800482c <vTaskSwitchContext+0xb0>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	e011      	b.n	80047c4 <vTaskSwitchContext+0x48>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <vTaskSwitchContext+0x42>
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	607b      	str	r3, [r7, #4]
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	e7fd      	b.n	80047ba <vTaskSwitchContext+0x3e>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	491a      	ldr	r1, [pc, #104]	@ (8004830 <vTaskSwitchContext+0xb4>)
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0e3      	beq.n	80047a0 <vTaskSwitchContext+0x24>
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4a13      	ldr	r2, [pc, #76]	@ (8004830 <vTaskSwitchContext+0xb4>)
 80047e4:	4413      	add	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	3308      	adds	r3, #8
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d104      	bne.n	8004808 <vTaskSwitchContext+0x8c>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	4a09      	ldr	r2, [pc, #36]	@ (8004834 <vTaskSwitchContext+0xb8>)
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4a06      	ldr	r2, [pc, #24]	@ (800482c <vTaskSwitchContext+0xb0>)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6013      	str	r3, [r2, #0]
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	20000d00 	.word	0x20000d00
 8004828:	20000cec 	.word	0x20000cec
 800482c:	20000ce0 	.word	0x20000ce0
 8004830:	20000808 	.word	0x20000808
 8004834:	20000804 	.word	0x20000804

08004838 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10b      	bne.n	8004860 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	60fb      	str	r3, [r7, #12]
}
 800485a:	bf00      	nop
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004860:	4b07      	ldr	r3, [pc, #28]	@ (8004880 <vTaskPlaceOnEventList+0x48>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3318      	adds	r3, #24
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7fe fe70 	bl	800354e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800486e:	2101      	movs	r1, #1
 8004870:	6838      	ldr	r0, [r7, #0]
 8004872:	f000 fa81 	bl	8004d78 <prvAddCurrentTaskToDelayedList>
}
 8004876:	bf00      	nop
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000804 	.word	0x20000804

08004884 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	617b      	str	r3, [r7, #20]
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	e7fd      	b.n	80048aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048ae:	4b0a      	ldr	r3, [pc, #40]	@ (80048d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3318      	adds	r3, #24
 80048b4:	4619      	mov	r1, r3
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f7fe fe25 	bl	8003506 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80048c2:	f04f 33ff 	mov.w	r3, #4294967295
 80048c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	68b8      	ldr	r0, [r7, #8]
 80048cc:	f000 fa54 	bl	8004d78 <prvAddCurrentTaskToDelayedList>
	}
 80048d0:	bf00      	nop
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	20000804 	.word	0x20000804

080048dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60fb      	str	r3, [r7, #12]
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	3318      	adds	r3, #24
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe fe56 	bl	80035c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004914:	4b1d      	ldr	r3, [pc, #116]	@ (800498c <xTaskRemoveFromEventList+0xb0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d11d      	bne.n	8004958 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	3304      	adds	r3, #4
 8004920:	4618      	mov	r0, r3
 8004922:	f7fe fe4d 	bl	80035c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800492a:	4b19      	ldr	r3, [pc, #100]	@ (8004990 <xTaskRemoveFromEventList+0xb4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d903      	bls.n	800493a <xTaskRemoveFromEventList+0x5e>
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004936:	4a16      	ldr	r2, [pc, #88]	@ (8004990 <xTaskRemoveFromEventList+0xb4>)
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800493e:	4613      	mov	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4a13      	ldr	r2, [pc, #76]	@ (8004994 <xTaskRemoveFromEventList+0xb8>)
 8004948:	441a      	add	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	3304      	adds	r3, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f7fe fdd8 	bl	8003506 <vListInsertEnd>
 8004956:	e005      	b.n	8004964 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	3318      	adds	r3, #24
 800495c:	4619      	mov	r1, r3
 800495e:	480e      	ldr	r0, [pc, #56]	@ (8004998 <xTaskRemoveFromEventList+0xbc>)
 8004960:	f7fe fdd1 	bl	8003506 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004968:	4b0c      	ldr	r3, [pc, #48]	@ (800499c <xTaskRemoveFromEventList+0xc0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496e:	429a      	cmp	r2, r3
 8004970:	d905      	bls.n	800497e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004972:	2301      	movs	r3, #1
 8004974:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004976:	4b0a      	ldr	r3, [pc, #40]	@ (80049a0 <xTaskRemoveFromEventList+0xc4>)
 8004978:	2201      	movs	r2, #1
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e001      	b.n	8004982 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004982:	697b      	ldr	r3, [r7, #20]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20000d00 	.word	0x20000d00
 8004990:	20000ce0 	.word	0x20000ce0
 8004994:	20000808 	.word	0x20000808
 8004998:	20000c98 	.word	0x20000c98
 800499c:	20000804 	.word	0x20000804
 80049a0:	20000cec 	.word	0x20000cec

080049a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049ac:	4b06      	ldr	r3, [pc, #24]	@ (80049c8 <vTaskInternalSetTimeOutState+0x24>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049b4:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <vTaskInternalSetTimeOutState+0x28>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	605a      	str	r2, [r3, #4]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	20000cf0 	.word	0x20000cf0
 80049cc:	20000cdc 	.word	0x20000cdc

080049d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10b      	bne.n	80049f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	613b      	str	r3, [r7, #16]
}
 80049f2:	bf00      	nop
 80049f4:	bf00      	nop
 80049f6:	e7fd      	b.n	80049f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	60fb      	str	r3, [r7, #12]
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	e7fd      	b.n	8004a12 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004a16:	f000 fe8f 	bl	8005738 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a90 <xTaskCheckForTimeOut+0xc0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a32:	d102      	bne.n	8004a3a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	e023      	b.n	8004a82 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <xTaskCheckForTimeOut+0xc4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d007      	beq.n	8004a56 <xTaskCheckForTimeOut+0x86>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d302      	bcc.n	8004a56 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a50:	2301      	movs	r3, #1
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	e015      	b.n	8004a82 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d20b      	bcs.n	8004a78 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad2      	subs	r2, r2, r3
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff ff99 	bl	80049a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	e004      	b.n	8004a82 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a82:	f000 fe8b 	bl	800579c <vPortExitCritical>

	return xReturn;
 8004a86:	69fb      	ldr	r3, [r7, #28]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3720      	adds	r7, #32
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000cdc 	.word	0x20000cdc
 8004a94:	20000cf0 	.word	0x20000cf0

08004a98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a9c:	4b03      	ldr	r3, [pc, #12]	@ (8004aac <vTaskMissedYield+0x14>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	20000cec 	.word	0x20000cec

08004ab0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ab8:	f000 f852 	bl	8004b60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004abc:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <prvIdleTask+0x28>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d9f9      	bls.n	8004ab8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ac4:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <prvIdleTask+0x2c>)
 8004ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ad4:	e7f0      	b.n	8004ab8 <prvIdleTask+0x8>
 8004ad6:	bf00      	nop
 8004ad8:	20000808 	.word	0x20000808
 8004adc:	e000ed04 	.word	0xe000ed04

08004ae0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	607b      	str	r3, [r7, #4]
 8004aea:	e00c      	b.n	8004b06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4a12      	ldr	r2, [pc, #72]	@ (8004b40 <prvInitialiseTaskLists+0x60>)
 8004af8:	4413      	add	r3, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe fcd6 	bl	80034ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3301      	adds	r3, #1
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2b37      	cmp	r3, #55	@ 0x37
 8004b0a:	d9ef      	bls.n	8004aec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b0c:	480d      	ldr	r0, [pc, #52]	@ (8004b44 <prvInitialiseTaskLists+0x64>)
 8004b0e:	f7fe fccd 	bl	80034ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b12:	480d      	ldr	r0, [pc, #52]	@ (8004b48 <prvInitialiseTaskLists+0x68>)
 8004b14:	f7fe fcca 	bl	80034ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b18:	480c      	ldr	r0, [pc, #48]	@ (8004b4c <prvInitialiseTaskLists+0x6c>)
 8004b1a:	f7fe fcc7 	bl	80034ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b1e:	480c      	ldr	r0, [pc, #48]	@ (8004b50 <prvInitialiseTaskLists+0x70>)
 8004b20:	f7fe fcc4 	bl	80034ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b24:	480b      	ldr	r0, [pc, #44]	@ (8004b54 <prvInitialiseTaskLists+0x74>)
 8004b26:	f7fe fcc1 	bl	80034ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b58 <prvInitialiseTaskLists+0x78>)
 8004b2c:	4a05      	ldr	r2, [pc, #20]	@ (8004b44 <prvInitialiseTaskLists+0x64>)
 8004b2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b30:	4b0a      	ldr	r3, [pc, #40]	@ (8004b5c <prvInitialiseTaskLists+0x7c>)
 8004b32:	4a05      	ldr	r2, [pc, #20]	@ (8004b48 <prvInitialiseTaskLists+0x68>)
 8004b34:	601a      	str	r2, [r3, #0]
}
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000808 	.word	0x20000808
 8004b44:	20000c68 	.word	0x20000c68
 8004b48:	20000c7c 	.word	0x20000c7c
 8004b4c:	20000c98 	.word	0x20000c98
 8004b50:	20000cac 	.word	0x20000cac
 8004b54:	20000cc4 	.word	0x20000cc4
 8004b58:	20000c90 	.word	0x20000c90
 8004b5c:	20000c94 	.word	0x20000c94

08004b60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b66:	e019      	b.n	8004b9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b68:	f000 fde6 	bl	8005738 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6c:	4b10      	ldr	r3, [pc, #64]	@ (8004bb0 <prvCheckTasksWaitingTermination+0x50>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3304      	adds	r3, #4
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fe fd21 	bl	80035c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb4 <prvCheckTasksWaitingTermination+0x54>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	4a0b      	ldr	r2, [pc, #44]	@ (8004bb4 <prvCheckTasksWaitingTermination+0x54>)
 8004b86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b88:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <prvCheckTasksWaitingTermination+0x58>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb8 <prvCheckTasksWaitingTermination+0x58>)
 8004b90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b92:	f000 fe03 	bl	800579c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f810 	bl	8004bbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b9c:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <prvCheckTasksWaitingTermination+0x58>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e1      	bne.n	8004b68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000cac 	.word	0x20000cac
 8004bb4:	20000cd8 	.word	0x20000cd8
 8004bb8:	20000cc0 	.word	0x20000cc0

08004bbc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d108      	bne.n	8004be0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 ffa0 	bl	8005b18 <vPortFree>
				vPortFree( pxTCB );
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 ff9d 	bl	8005b18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bde:	e019      	b.n	8004c14 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d103      	bne.n	8004bf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 ff94 	bl	8005b18 <vPortFree>
	}
 8004bf0:	e010      	b.n	8004c14 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d00b      	beq.n	8004c14 <prvDeleteTCB+0x58>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	60fb      	str	r3, [r7, #12]
}
 8004c0e:	bf00      	nop
 8004c10:	bf00      	nop
 8004c12:	e7fd      	b.n	8004c10 <prvDeleteTCB+0x54>
	}
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c22:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <prvResetNextTaskUnblockTime+0x38>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d104      	bne.n	8004c36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <prvResetNextTaskUnblockTime+0x3c>)
 8004c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c34:	e008      	b.n	8004c48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c36:	4b07      	ldr	r3, [pc, #28]	@ (8004c54 <prvResetNextTaskUnblockTime+0x38>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4a04      	ldr	r2, [pc, #16]	@ (8004c58 <prvResetNextTaskUnblockTime+0x3c>)
 8004c46:	6013      	str	r3, [r2, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	20000c90 	.word	0x20000c90
 8004c58:	20000cf8 	.word	0x20000cf8

08004c5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c62:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <xTaskGetSchedulerState+0x34>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	e008      	b.n	8004c82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c70:	4b08      	ldr	r3, [pc, #32]	@ (8004c94 <xTaskGetSchedulerState+0x38>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	607b      	str	r3, [r7, #4]
 8004c7c:	e001      	b.n	8004c82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c82:	687b      	ldr	r3, [r7, #4]
	}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	20000ce4 	.word	0x20000ce4
 8004c94:	20000d00 	.word	0x20000d00

08004c98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d058      	beq.n	8004d60 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004cae:	4b2f      	ldr	r3, [pc, #188]	@ (8004d6c <xTaskPriorityDisinherit+0xd4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d00b      	beq.n	8004cd0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	60fb      	str	r3, [r7, #12]
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	e7fd      	b.n	8004ccc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10b      	bne.n	8004cf0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	60bb      	str	r3, [r7, #8]
}
 8004cea:	bf00      	nop
 8004cec:	bf00      	nop
 8004cee:	e7fd      	b.n	8004cec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf4:	1e5a      	subs	r2, r3, #1
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d02c      	beq.n	8004d60 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d128      	bne.n	8004d60 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	3304      	adds	r3, #4
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fe fc54 	bl	80035c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d30:	4b0f      	ldr	r3, [pc, #60]	@ (8004d70 <xTaskPriorityDisinherit+0xd8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d903      	bls.n	8004d40 <xTaskPriorityDisinherit+0xa8>
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8004d70 <xTaskPriorityDisinherit+0xd8>)
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4a09      	ldr	r2, [pc, #36]	@ (8004d74 <xTaskPriorityDisinherit+0xdc>)
 8004d4e:	441a      	add	r2, r3
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f7fe fbd5 	bl	8003506 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d60:	697b      	ldr	r3, [r7, #20]
	}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000804 	.word	0x20000804
 8004d70:	20000ce0 	.word	0x20000ce0
 8004d74:	20000808 	.word	0x20000808

08004d78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d82:	4b21      	ldr	r3, [pc, #132]	@ (8004e08 <prvAddCurrentTaskToDelayedList+0x90>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d88:	4b20      	ldr	r3, [pc, #128]	@ (8004e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe fc16 	bl	80035c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d10a      	bne.n	8004db2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004da2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4819      	ldr	r0, [pc, #100]	@ (8004e10 <prvAddCurrentTaskToDelayedList+0x98>)
 8004dac:	f7fe fbab 	bl	8003506 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004db0:	e026      	b.n	8004e00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4413      	add	r3, r2
 8004db8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dba:	4b14      	ldr	r3, [pc, #80]	@ (8004e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d209      	bcs.n	8004dde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dca:	4b12      	ldr	r3, [pc, #72]	@ (8004e14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b0f      	ldr	r3, [pc, #60]	@ (8004e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f7fe fbb9 	bl	800354e <vListInsert>
}
 8004ddc:	e010      	b.n	8004e00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dde:	4b0e      	ldr	r3, [pc, #56]	@ (8004e18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <prvAddCurrentTaskToDelayedList+0x94>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3304      	adds	r3, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f7fe fbaf 	bl	800354e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004df0:	4b0a      	ldr	r3, [pc, #40]	@ (8004e1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d202      	bcs.n	8004e00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004dfa:	4a08      	ldr	r2, [pc, #32]	@ (8004e1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6013      	str	r3, [r2, #0]
}
 8004e00:	bf00      	nop
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20000cdc 	.word	0x20000cdc
 8004e0c:	20000804 	.word	0x20000804
 8004e10:	20000cc4 	.word	0x20000cc4
 8004e14:	20000c94 	.word	0x20000c94
 8004e18:	20000c90 	.word	0x20000c90
 8004e1c:	20000cf8 	.word	0x20000cf8

08004e20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08a      	sub	sp, #40	@ 0x28
 8004e24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e2a:	f000 fb13 	bl	8005454 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea4 <xTimerCreateTimerTask+0x84>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d021      	beq.n	8004e7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e3e:	1d3a      	adds	r2, r7, #4
 8004e40:	f107 0108 	add.w	r1, r7, #8
 8004e44:	f107 030c 	add.w	r3, r7, #12
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7fe fb15 	bl	8003478 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	9202      	str	r2, [sp, #8]
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	2302      	movs	r3, #2
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	460a      	mov	r2, r1
 8004e60:	4911      	ldr	r1, [pc, #68]	@ (8004ea8 <xTimerCreateTimerTask+0x88>)
 8004e62:	4812      	ldr	r0, [pc, #72]	@ (8004eac <xTimerCreateTimerTask+0x8c>)
 8004e64:	f7ff f8d0 	bl	8004008 <xTaskCreateStatic>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4a11      	ldr	r2, [pc, #68]	@ (8004eb0 <xTimerCreateTimerTask+0x90>)
 8004e6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004e6e:	4b10      	ldr	r3, [pc, #64]	@ (8004eb0 <xTimerCreateTimerTask+0x90>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e76:	2301      	movs	r3, #1
 8004e78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	613b      	str	r3, [r7, #16]
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	e7fd      	b.n	8004e94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004e98:	697b      	ldr	r3, [r7, #20]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000d34 	.word	0x20000d34
 8004ea8:	08005df8 	.word	0x08005df8
 8004eac:	08004fed 	.word	0x08004fed
 8004eb0:	20000d38 	.word	0x20000d38

08004eb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	@ 0x28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10b      	bne.n	8004ee4 <xTimerGenericCommand+0x30>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	623b      	str	r3, [r7, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	bf00      	nop
 8004ee2:	e7fd      	b.n	8004ee0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ee4:	4b19      	ldr	r3, [pc, #100]	@ (8004f4c <xTimerGenericCommand+0x98>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d02a      	beq.n	8004f42 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	dc18      	bgt.n	8004f30 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004efe:	f7ff fead 	bl	8004c5c <xTaskGetSchedulerState>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d109      	bne.n	8004f1c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f08:	4b10      	ldr	r3, [pc, #64]	@ (8004f4c <xTimerGenericCommand+0x98>)
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	f107 0110 	add.w	r1, r7, #16
 8004f10:	2300      	movs	r3, #0
 8004f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f14:	f7fe fc88 	bl	8003828 <xQueueGenericSend>
 8004f18:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f1a:	e012      	b.n	8004f42 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <xTimerGenericCommand+0x98>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	f107 0110 	add.w	r1, r7, #16
 8004f24:	2300      	movs	r3, #0
 8004f26:	2200      	movs	r2, #0
 8004f28:	f7fe fc7e 	bl	8003828 <xQueueGenericSend>
 8004f2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004f2e:	e008      	b.n	8004f42 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f30:	4b06      	ldr	r3, [pc, #24]	@ (8004f4c <xTimerGenericCommand+0x98>)
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	f107 0110 	add.w	r1, r7, #16
 8004f38:	2300      	movs	r3, #0
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	f7fe fd76 	bl	8003a2c <xQueueGenericSendFromISR>
 8004f40:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3728      	adds	r7, #40	@ 0x28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000d34 	.word	0x20000d34

08004f50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af02      	add	r7, sp, #8
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f5a:	4b23      	ldr	r3, [pc, #140]	@ (8004fe8 <prvProcessExpiredTimer+0x98>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fe fb29 	bl	80035c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d023      	beq.n	8004fc4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	699a      	ldr	r2, [r3, #24]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	18d1      	adds	r1, r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	6978      	ldr	r0, [r7, #20]
 8004f8a:	f000 f8d5 	bl	8005138 <prvInsertTimerInActiveList>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d020      	beq.n	8004fd6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f94:	2300      	movs	r3, #0
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	6978      	ldr	r0, [r7, #20]
 8004fa0:	f7ff ff88 	bl	8004eb4 <xTimerGenericCommand>
 8004fa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d114      	bne.n	8004fd6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60fb      	str	r3, [r7, #12]
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	e7fd      	b.n	8004fc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	4798      	blx	r3
}
 8004fde:	bf00      	nop
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000d2c 	.word	0x20000d2c

08004fec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ff4:	f107 0308 	add.w	r3, r7, #8
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 f859 	bl	80050b0 <prvGetNextExpireTime>
 8004ffe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4619      	mov	r1, r3
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f805 	bl	8005014 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800500a:	f000 f8d7 	bl	80051bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800500e:	bf00      	nop
 8005010:	e7f0      	b.n	8004ff4 <prvTimerTask+0x8>
	...

08005014 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800501e:	f7ff fa37 	bl	8004490 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005022:	f107 0308 	add.w	r3, r7, #8
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f866 	bl	80050f8 <prvSampleTimeNow>
 800502c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d130      	bne.n	8005096 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10a      	bne.n	8005050 <prvProcessTimerOrBlockTask+0x3c>
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	429a      	cmp	r2, r3
 8005040:	d806      	bhi.n	8005050 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005042:	f7ff fa33 	bl	80044ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005046:	68f9      	ldr	r1, [r7, #12]
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff ff81 	bl	8004f50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800504e:	e024      	b.n	800509a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d008      	beq.n	8005068 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005056:	4b13      	ldr	r3, [pc, #76]	@ (80050a4 <prvProcessTimerOrBlockTask+0x90>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <prvProcessTimerOrBlockTask+0x50>
 8005060:	2301      	movs	r3, #1
 8005062:	e000      	b.n	8005066 <prvProcessTimerOrBlockTask+0x52>
 8005064:	2300      	movs	r3, #0
 8005066:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005068:	4b0f      	ldr	r3, [pc, #60]	@ (80050a8 <prvProcessTimerOrBlockTask+0x94>)
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	4619      	mov	r1, r3
 8005076:	f7fe ff93 	bl	8003fa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800507a:	f7ff fa17 	bl	80044ac <xTaskResumeAll>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005084:	4b09      	ldr	r3, [pc, #36]	@ (80050ac <prvProcessTimerOrBlockTask+0x98>)
 8005086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	f3bf 8f6f 	isb	sy
}
 8005094:	e001      	b.n	800509a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005096:	f7ff fa09 	bl	80044ac <xTaskResumeAll>
}
 800509a:	bf00      	nop
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20000d30 	.word	0x20000d30
 80050a8:	20000d34 	.word	0x20000d34
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80050b8:	4b0e      	ldr	r3, [pc, #56]	@ (80050f4 <prvGetNextExpireTime+0x44>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <prvGetNextExpireTime+0x16>
 80050c2:	2201      	movs	r2, #1
 80050c4:	e000      	b.n	80050c8 <prvGetNextExpireTime+0x18>
 80050c6:	2200      	movs	r2, #0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d105      	bne.n	80050e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050d4:	4b07      	ldr	r3, [pc, #28]	@ (80050f4 <prvGetNextExpireTime+0x44>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	e001      	b.n	80050e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80050e4:	68fb      	ldr	r3, [r7, #12]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20000d2c 	.word	0x20000d2c

080050f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005100:	f7ff fa72 	bl	80045e8 <xTaskGetTickCount>
 8005104:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005106:	4b0b      	ldr	r3, [pc, #44]	@ (8005134 <prvSampleTimeNow+0x3c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	429a      	cmp	r2, r3
 800510e:	d205      	bcs.n	800511c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005110:	f000 f93a 	bl	8005388 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	e002      	b.n	8005122 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005122:	4a04      	ldr	r2, [pc, #16]	@ (8005134 <prvSampleTimeNow+0x3c>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005128:	68fb      	ldr	r3, [r7, #12]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20000d3c 	.word	0x20000d3c

08005138 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	429a      	cmp	r2, r3
 800515c:	d812      	bhi.n	8005184 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	1ad2      	subs	r2, r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	429a      	cmp	r2, r3
 800516a:	d302      	bcc.n	8005172 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800516c:	2301      	movs	r3, #1
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	e01b      	b.n	80051aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005172:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <prvInsertTimerInActiveList+0x7c>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3304      	adds	r3, #4
 800517a:	4619      	mov	r1, r3
 800517c:	4610      	mov	r0, r2
 800517e:	f7fe f9e6 	bl	800354e <vListInsert>
 8005182:	e012      	b.n	80051aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d206      	bcs.n	800519a <prvInsertTimerInActiveList+0x62>
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d302      	bcc.n	800519a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005194:	2301      	movs	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e007      	b.n	80051aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800519a:	4b07      	ldr	r3, [pc, #28]	@ (80051b8 <prvInsertTimerInActiveList+0x80>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3304      	adds	r3, #4
 80051a2:	4619      	mov	r1, r3
 80051a4:	4610      	mov	r0, r2
 80051a6:	f7fe f9d2 	bl	800354e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051aa:	697b      	ldr	r3, [r7, #20]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000d30 	.word	0x20000d30
 80051b8:	20000d2c 	.word	0x20000d2c

080051bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08e      	sub	sp, #56	@ 0x38
 80051c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051c2:	e0ce      	b.n	8005362 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	da19      	bge.n	80051fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80051ca:	1d3b      	adds	r3, r7, #4
 80051cc:	3304      	adds	r3, #4
 80051ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80051d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10b      	bne.n	80051ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	61fb      	str	r3, [r7, #28]
}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	e7fd      	b.n	80051ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80051ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051f4:	6850      	ldr	r0, [r2, #4]
 80051f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051f8:	6892      	ldr	r2, [r2, #8]
 80051fa:	4611      	mov	r1, r2
 80051fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f2c0 80ae 	blt.w	8005362 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800520a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005214:	3304      	adds	r3, #4
 8005216:	4618      	mov	r0, r3
 8005218:	f7fe f9d2 	bl	80035c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800521c:	463b      	mov	r3, r7
 800521e:	4618      	mov	r0, r3
 8005220:	f7ff ff6a 	bl	80050f8 <prvSampleTimeNow>
 8005224:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b09      	cmp	r3, #9
 800522a:	f200 8097 	bhi.w	800535c <prvProcessReceivedCommands+0x1a0>
 800522e:	a201      	add	r2, pc, #4	@ (adr r2, 8005234 <prvProcessReceivedCommands+0x78>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	0800525d 	.word	0x0800525d
 8005238:	0800525d 	.word	0x0800525d
 800523c:	0800525d 	.word	0x0800525d
 8005240:	080052d3 	.word	0x080052d3
 8005244:	080052e7 	.word	0x080052e7
 8005248:	08005333 	.word	0x08005333
 800524c:	0800525d 	.word	0x0800525d
 8005250:	0800525d 	.word	0x0800525d
 8005254:	080052d3 	.word	0x080052d3
 8005258:	080052e7 	.word	0x080052e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	b2da      	uxtb	r2, r3
 8005268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	18d1      	adds	r1, r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800527a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800527c:	f7ff ff5c 	bl	8005138 <prvInsertTimerInActiveList>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d06c      	beq.n	8005360 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800528c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d061      	beq.n	8005360 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	441a      	add	r2, r3
 80052a4:	2300      	movs	r3, #0
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	2100      	movs	r1, #0
 80052ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052ae:	f7ff fe01 	bl	8004eb4 <xTimerGenericCommand>
 80052b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d152      	bne.n	8005360 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	61bb      	str	r3, [r7, #24]
}
 80052cc:	bf00      	nop
 80052ce:	bf00      	nop
 80052d0:	e7fd      	b.n	80052ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052d8:	f023 0301 	bic.w	r3, r3, #1
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80052e4:	e03d      	b.n	8005362 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10b      	bne.n	800531e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	617b      	str	r3, [r7, #20]
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	e7fd      	b.n	800531a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800531e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	18d1      	adds	r1, r2, r3
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800532a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800532c:	f7ff ff04 	bl	8005138 <prvInsertTimerInActiveList>
					break;
 8005330:	e017      	b.n	8005362 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005334:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d103      	bne.n	8005348 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005340:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005342:	f000 fbe9 	bl	8005b18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005346:	e00c      	b.n	8005362 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800534e:	f023 0301 	bic.w	r3, r3, #1
 8005352:	b2da      	uxtb	r2, r3
 8005354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005356:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800535a:	e002      	b.n	8005362 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800535c:	bf00      	nop
 800535e:	e000      	b.n	8005362 <prvProcessReceivedCommands+0x1a6>
					break;
 8005360:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005362:	4b08      	ldr	r3, [pc, #32]	@ (8005384 <prvProcessReceivedCommands+0x1c8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	1d39      	adds	r1, r7, #4
 8005368:	2200      	movs	r2, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f7fe fbfc 	bl	8003b68 <xQueueReceive>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	f47f af26 	bne.w	80051c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005378:	bf00      	nop
 800537a:	bf00      	nop
 800537c:	3730      	adds	r7, #48	@ 0x30
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000d34 	.word	0x20000d34

08005388 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800538e:	e049      	b.n	8005424 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005390:	4b2e      	ldr	r3, [pc, #184]	@ (800544c <prvSwitchTimerLists+0xc4>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800539a:	4b2c      	ldr	r3, [pc, #176]	@ (800544c <prvSwitchTimerLists+0xc4>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fe f909 	bl	80035c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d02f      	beq.n	8005424 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4413      	add	r3, r2
 80053cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d90e      	bls.n	80053f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053e2:	4b1a      	ldr	r3, [pc, #104]	@ (800544c <prvSwitchTimerLists+0xc4>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7fe f8ae 	bl	800354e <vListInsert>
 80053f2:	e017      	b.n	8005424 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053f4:	2300      	movs	r3, #0
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	2300      	movs	r3, #0
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	2100      	movs	r1, #0
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff fd58 	bl	8004eb4 <xTimerGenericCommand>
 8005404:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	603b      	str	r3, [r7, #0]
}
 800541e:	bf00      	nop
 8005420:	bf00      	nop
 8005422:	e7fd      	b.n	8005420 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005424:	4b09      	ldr	r3, [pc, #36]	@ (800544c <prvSwitchTimerLists+0xc4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1b0      	bne.n	8005390 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800542e:	4b07      	ldr	r3, [pc, #28]	@ (800544c <prvSwitchTimerLists+0xc4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005434:	4b06      	ldr	r3, [pc, #24]	@ (8005450 <prvSwitchTimerLists+0xc8>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a04      	ldr	r2, [pc, #16]	@ (800544c <prvSwitchTimerLists+0xc4>)
 800543a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800543c:	4a04      	ldr	r2, [pc, #16]	@ (8005450 <prvSwitchTimerLists+0xc8>)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	6013      	str	r3, [r2, #0]
}
 8005442:	bf00      	nop
 8005444:	3718      	adds	r7, #24
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000d2c 	.word	0x20000d2c
 8005450:	20000d30 	.word	0x20000d30

08005454 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800545a:	f000 f96d 	bl	8005738 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800545e:	4b15      	ldr	r3, [pc, #84]	@ (80054b4 <prvCheckForValidListAndQueue+0x60>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d120      	bne.n	80054a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005466:	4814      	ldr	r0, [pc, #80]	@ (80054b8 <prvCheckForValidListAndQueue+0x64>)
 8005468:	f7fe f820 	bl	80034ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800546c:	4813      	ldr	r0, [pc, #76]	@ (80054bc <prvCheckForValidListAndQueue+0x68>)
 800546e:	f7fe f81d 	bl	80034ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005472:	4b13      	ldr	r3, [pc, #76]	@ (80054c0 <prvCheckForValidListAndQueue+0x6c>)
 8005474:	4a10      	ldr	r2, [pc, #64]	@ (80054b8 <prvCheckForValidListAndQueue+0x64>)
 8005476:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005478:	4b12      	ldr	r3, [pc, #72]	@ (80054c4 <prvCheckForValidListAndQueue+0x70>)
 800547a:	4a10      	ldr	r2, [pc, #64]	@ (80054bc <prvCheckForValidListAndQueue+0x68>)
 800547c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800547e:	2300      	movs	r3, #0
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	4b11      	ldr	r3, [pc, #68]	@ (80054c8 <prvCheckForValidListAndQueue+0x74>)
 8005484:	4a11      	ldr	r2, [pc, #68]	@ (80054cc <prvCheckForValidListAndQueue+0x78>)
 8005486:	2110      	movs	r1, #16
 8005488:	200a      	movs	r0, #10
 800548a:	f7fe f92d 	bl	80036e8 <xQueueGenericCreateStatic>
 800548e:	4603      	mov	r3, r0
 8005490:	4a08      	ldr	r2, [pc, #32]	@ (80054b4 <prvCheckForValidListAndQueue+0x60>)
 8005492:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005494:	4b07      	ldr	r3, [pc, #28]	@ (80054b4 <prvCheckForValidListAndQueue+0x60>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800549c:	4b05      	ldr	r3, [pc, #20]	@ (80054b4 <prvCheckForValidListAndQueue+0x60>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	490b      	ldr	r1, [pc, #44]	@ (80054d0 <prvCheckForValidListAndQueue+0x7c>)
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe fd52 	bl	8003f4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054a8:	f000 f978 	bl	800579c <vPortExitCritical>
}
 80054ac:	bf00      	nop
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000d34 	.word	0x20000d34
 80054b8:	20000d04 	.word	0x20000d04
 80054bc:	20000d18 	.word	0x20000d18
 80054c0:	20000d2c 	.word	0x20000d2c
 80054c4:	20000d30 	.word	0x20000d30
 80054c8:	20000de0 	.word	0x20000de0
 80054cc:	20000d40 	.word	0x20000d40
 80054d0:	08005e00 	.word	0x08005e00

080054d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3b04      	subs	r3, #4
 80054e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3b04      	subs	r3, #4
 80054f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f023 0201 	bic.w	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3b04      	subs	r3, #4
 8005502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005504:	4a0c      	ldr	r2, [pc, #48]	@ (8005538 <pxPortInitialiseStack+0x64>)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3b14      	subs	r3, #20
 800550e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3b04      	subs	r3, #4
 800551a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f06f 0202 	mvn.w	r2, #2
 8005522:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3b20      	subs	r3, #32
 8005528:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800552a:	68fb      	ldr	r3, [r7, #12]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	0800553d 	.word	0x0800553d

0800553c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005546:	4b13      	ldr	r3, [pc, #76]	@ (8005594 <prvTaskExitError+0x58>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554e:	d00b      	beq.n	8005568 <prvTaskExitError+0x2c>
	__asm volatile
 8005550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	60fb      	str	r3, [r7, #12]
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <prvTaskExitError+0x28>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	60bb      	str	r3, [r7, #8]
}
 800557a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800557c:	bf00      	nop
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0fc      	beq.n	800557e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	2000000c 	.word	0x2000000c
	...

080055a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80055a0:	4b07      	ldr	r3, [pc, #28]	@ (80055c0 <pxCurrentTCBConst2>)
 80055a2:	6819      	ldr	r1, [r3, #0]
 80055a4:	6808      	ldr	r0, [r1, #0]
 80055a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055aa:	f380 8809 	msr	PSP, r0
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f380 8811 	msr	BASEPRI, r0
 80055ba:	4770      	bx	lr
 80055bc:	f3af 8000 	nop.w

080055c0 <pxCurrentTCBConst2>:
 80055c0:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop

080055c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80055c8:	4808      	ldr	r0, [pc, #32]	@ (80055ec <prvPortStartFirstTask+0x24>)
 80055ca:	6800      	ldr	r0, [r0, #0]
 80055cc:	6800      	ldr	r0, [r0, #0]
 80055ce:	f380 8808 	msr	MSP, r0
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f380 8814 	msr	CONTROL, r0
 80055da:	b662      	cpsie	i
 80055dc:	b661      	cpsie	f
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	df00      	svc	0
 80055e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80055ea:	bf00      	nop
 80055ec:	e000ed08 	.word	0xe000ed08

080055f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80055f6:	4b47      	ldr	r3, [pc, #284]	@ (8005714 <xPortStartScheduler+0x124>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a47      	ldr	r2, [pc, #284]	@ (8005718 <xPortStartScheduler+0x128>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10b      	bne.n	8005618 <xPortStartScheduler+0x28>
	__asm volatile
 8005600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	613b      	str	r3, [r7, #16]
}
 8005612:	bf00      	nop
 8005614:	bf00      	nop
 8005616:	e7fd      	b.n	8005614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005618:	4b3e      	ldr	r3, [pc, #248]	@ (8005714 <xPortStartScheduler+0x124>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a3f      	ldr	r2, [pc, #252]	@ (800571c <xPortStartScheduler+0x12c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d10b      	bne.n	800563a <xPortStartScheduler+0x4a>
	__asm volatile
 8005622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	60fb      	str	r3, [r7, #12]
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop
 8005638:	e7fd      	b.n	8005636 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800563a:	4b39      	ldr	r3, [pc, #228]	@ (8005720 <xPortStartScheduler+0x130>)
 800563c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	22ff      	movs	r2, #255	@ 0xff
 800564a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800565c:	b2da      	uxtb	r2, r3
 800565e:	4b31      	ldr	r3, [pc, #196]	@ (8005724 <xPortStartScheduler+0x134>)
 8005660:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005662:	4b31      	ldr	r3, [pc, #196]	@ (8005728 <xPortStartScheduler+0x138>)
 8005664:	2207      	movs	r2, #7
 8005666:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005668:	e009      	b.n	800567e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800566a:	4b2f      	ldr	r3, [pc, #188]	@ (8005728 <xPortStartScheduler+0x138>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3b01      	subs	r3, #1
 8005670:	4a2d      	ldr	r2, [pc, #180]	@ (8005728 <xPortStartScheduler+0x138>)
 8005672:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800567e:	78fb      	ldrb	r3, [r7, #3]
 8005680:	b2db      	uxtb	r3, r3
 8005682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005686:	2b80      	cmp	r3, #128	@ 0x80
 8005688:	d0ef      	beq.n	800566a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800568a:	4b27      	ldr	r3, [pc, #156]	@ (8005728 <xPortStartScheduler+0x138>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f1c3 0307 	rsb	r3, r3, #7
 8005692:	2b04      	cmp	r3, #4
 8005694:	d00b      	beq.n	80056ae <xPortStartScheduler+0xbe>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	60bb      	str	r3, [r7, #8]
}
 80056a8:	bf00      	nop
 80056aa:	bf00      	nop
 80056ac:	e7fd      	b.n	80056aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005728 <xPortStartScheduler+0x138>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005728 <xPortStartScheduler+0x138>)
 80056b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005728 <xPortStartScheduler+0x138>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056c0:	4a19      	ldr	r2, [pc, #100]	@ (8005728 <xPortStartScheduler+0x138>)
 80056c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80056cc:	4b17      	ldr	r3, [pc, #92]	@ (800572c <xPortStartScheduler+0x13c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a16      	ldr	r2, [pc, #88]	@ (800572c <xPortStartScheduler+0x13c>)
 80056d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80056d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80056d8:	4b14      	ldr	r3, [pc, #80]	@ (800572c <xPortStartScheduler+0x13c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a13      	ldr	r2, [pc, #76]	@ (800572c <xPortStartScheduler+0x13c>)
 80056de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80056e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80056e4:	f000 f8da 	bl	800589c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80056e8:	4b11      	ldr	r3, [pc, #68]	@ (8005730 <xPortStartScheduler+0x140>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80056ee:	f000 f8f9 	bl	80058e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80056f2:	4b10      	ldr	r3, [pc, #64]	@ (8005734 <xPortStartScheduler+0x144>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005734 <xPortStartScheduler+0x144>)
 80056f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80056fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80056fe:	f7ff ff63 	bl	80055c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005702:	f7ff f83b 	bl	800477c <vTaskSwitchContext>
	prvTaskExitError();
 8005706:	f7ff ff19 	bl	800553c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	e000ed00 	.word	0xe000ed00
 8005718:	410fc271 	.word	0x410fc271
 800571c:	410fc270 	.word	0x410fc270
 8005720:	e000e400 	.word	0xe000e400
 8005724:	20000e30 	.word	0x20000e30
 8005728:	20000e34 	.word	0x20000e34
 800572c:	e000ed20 	.word	0xe000ed20
 8005730:	2000000c 	.word	0x2000000c
 8005734:	e000ef34 	.word	0xe000ef34

08005738 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005752:	4b10      	ldr	r3, [pc, #64]	@ (8005794 <vPortEnterCritical+0x5c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3301      	adds	r3, #1
 8005758:	4a0e      	ldr	r2, [pc, #56]	@ (8005794 <vPortEnterCritical+0x5c>)
 800575a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800575c:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <vPortEnterCritical+0x5c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d110      	bne.n	8005786 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005764:	4b0c      	ldr	r3, [pc, #48]	@ (8005798 <vPortEnterCritical+0x60>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <vPortEnterCritical+0x4e>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	603b      	str	r3, [r7, #0]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <vPortEnterCritical+0x4a>
	}
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	2000000c 	.word	0x2000000c
 8005798:	e000ed04 	.word	0xe000ed04

0800579c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80057a2:	4b12      	ldr	r3, [pc, #72]	@ (80057ec <vPortExitCritical+0x50>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <vPortExitCritical+0x26>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	607b      	str	r3, [r7, #4]
}
 80057bc:	bf00      	nop
 80057be:	bf00      	nop
 80057c0:	e7fd      	b.n	80057be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80057c2:	4b0a      	ldr	r3, [pc, #40]	@ (80057ec <vPortExitCritical+0x50>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	4a08      	ldr	r2, [pc, #32]	@ (80057ec <vPortExitCritical+0x50>)
 80057ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80057cc:	4b07      	ldr	r3, [pc, #28]	@ (80057ec <vPortExitCritical+0x50>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d105      	bne.n	80057e0 <vPortExitCritical+0x44>
 80057d4:	2300      	movs	r3, #0
 80057d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	f383 8811 	msr	BASEPRI, r3
}
 80057de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	2000000c 	.word	0x2000000c

080057f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80057f0:	f3ef 8009 	mrs	r0, PSP
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <pxCurrentTCBConst>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	f01e 0f10 	tst.w	lr, #16
 8005800:	bf08      	it	eq
 8005802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580a:	6010      	str	r0, [r2, #0]
 800580c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005810:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005814:	f380 8811 	msr	BASEPRI, r0
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f7fe ffac 	bl	800477c <vTaskSwitchContext>
 8005824:	f04f 0000 	mov.w	r0, #0
 8005828:	f380 8811 	msr	BASEPRI, r0
 800582c:	bc09      	pop	{r0, r3}
 800582e:	6819      	ldr	r1, [r3, #0]
 8005830:	6808      	ldr	r0, [r1, #0]
 8005832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005836:	f01e 0f10 	tst.w	lr, #16
 800583a:	bf08      	it	eq
 800583c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005840:	f380 8809 	msr	PSP, r0
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	f3af 8000 	nop.w

08005850 <pxCurrentTCBConst>:
 8005850:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop

08005858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
	__asm volatile
 800585e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005862:	f383 8811 	msr	BASEPRI, r3
 8005866:	f3bf 8f6f 	isb	sy
 800586a:	f3bf 8f4f 	dsb	sy
 800586e:	607b      	str	r3, [r7, #4]
}
 8005870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005872:	f7fe fec9 	bl	8004608 <xTaskIncrementTick>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800587c:	4b06      	ldr	r3, [pc, #24]	@ (8005898 <xPortSysTickHandler+0x40>)
 800587e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	2300      	movs	r3, #0
 8005886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f383 8811 	msr	BASEPRI, r3
}
 800588e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	e000ed04 	.word	0xe000ed04

0800589c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058a0:	4b0b      	ldr	r3, [pc, #44]	@ (80058d0 <vPortSetupTimerInterrupt+0x34>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058a6:	4b0b      	ldr	r3, [pc, #44]	@ (80058d4 <vPortSetupTimerInterrupt+0x38>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058ac:	4b0a      	ldr	r3, [pc, #40]	@ (80058d8 <vPortSetupTimerInterrupt+0x3c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a0a      	ldr	r2, [pc, #40]	@ (80058dc <vPortSetupTimerInterrupt+0x40>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	099b      	lsrs	r3, r3, #6
 80058b8:	4a09      	ldr	r2, [pc, #36]	@ (80058e0 <vPortSetupTimerInterrupt+0x44>)
 80058ba:	3b01      	subs	r3, #1
 80058bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058be:	4b04      	ldr	r3, [pc, #16]	@ (80058d0 <vPortSetupTimerInterrupt+0x34>)
 80058c0:	2207      	movs	r2, #7
 80058c2:	601a      	str	r2, [r3, #0]
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	e000e010 	.word	0xe000e010
 80058d4:	e000e018 	.word	0xe000e018
 80058d8:	20000000 	.word	0x20000000
 80058dc:	10624dd3 	.word	0x10624dd3
 80058e0:	e000e014 	.word	0xe000e014

080058e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80058f4 <vPortEnableVFP+0x10>
 80058e8:	6801      	ldr	r1, [r0, #0]
 80058ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80058ee:	6001      	str	r1, [r0, #0]
 80058f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058f2:	bf00      	nop
 80058f4:	e000ed88 	.word	0xe000ed88

080058f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80058fe:	f3ef 8305 	mrs	r3, IPSR
 8005902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b0f      	cmp	r3, #15
 8005908:	d915      	bls.n	8005936 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800590a:	4a18      	ldr	r2, [pc, #96]	@ (800596c <vPortValidateInterruptPriority+0x74>)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005914:	4b16      	ldr	r3, [pc, #88]	@ (8005970 <vPortValidateInterruptPriority+0x78>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	7afa      	ldrb	r2, [r7, #11]
 800591a:	429a      	cmp	r2, r3
 800591c:	d20b      	bcs.n	8005936 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	607b      	str	r3, [r7, #4]
}
 8005930:	bf00      	nop
 8005932:	bf00      	nop
 8005934:	e7fd      	b.n	8005932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005936:	4b0f      	ldr	r3, [pc, #60]	@ (8005974 <vPortValidateInterruptPriority+0x7c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800593e:	4b0e      	ldr	r3, [pc, #56]	@ (8005978 <vPortValidateInterruptPriority+0x80>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d90b      	bls.n	800595e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	603b      	str	r3, [r7, #0]
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	e7fd      	b.n	800595a <vPortValidateInterruptPriority+0x62>
	}
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	e000e3f0 	.word	0xe000e3f0
 8005970:	20000e30 	.word	0x20000e30
 8005974:	e000ed0c 	.word	0xe000ed0c
 8005978:	20000e34 	.word	0x20000e34

0800597c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	@ 0x28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005988:	f7fe fd82 	bl	8004490 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800598c:	4b5c      	ldr	r3, [pc, #368]	@ (8005b00 <pvPortMalloc+0x184>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005994:	f000 f924 	bl	8005be0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005998:	4b5a      	ldr	r3, [pc, #360]	@ (8005b04 <pvPortMalloc+0x188>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f040 8095 	bne.w	8005ad0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01e      	beq.n	80059ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80059ac:	2208      	movs	r2, #8
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4413      	add	r3, r2
 80059b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d015      	beq.n	80059ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f023 0307 	bic.w	r3, r3, #7
 80059c4:	3308      	adds	r3, #8
 80059c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <pvPortMalloc+0x6e>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	617b      	str	r3, [r7, #20]
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	e7fd      	b.n	80059e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d06f      	beq.n	8005ad0 <pvPortMalloc+0x154>
 80059f0:	4b45      	ldr	r3, [pc, #276]	@ (8005b08 <pvPortMalloc+0x18c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d86a      	bhi.n	8005ad0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80059fa:	4b44      	ldr	r3, [pc, #272]	@ (8005b0c <pvPortMalloc+0x190>)
 80059fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80059fe:	4b43      	ldr	r3, [pc, #268]	@ (8005b0c <pvPortMalloc+0x190>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a04:	e004      	b.n	8005a10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d903      	bls.n	8005a22 <pvPortMalloc+0xa6>
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f1      	bne.n	8005a06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a22:	4b37      	ldr	r3, [pc, #220]	@ (8005b00 <pvPortMalloc+0x184>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d051      	beq.n	8005ad0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2208      	movs	r2, #8
 8005a32:	4413      	add	r3, r2
 8005a34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	1ad2      	subs	r2, r2, r3
 8005a46:	2308      	movs	r3, #8
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d920      	bls.n	8005a90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4413      	add	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00b      	beq.n	8005a78 <pvPortMalloc+0xfc>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	613b      	str	r3, [r7, #16]
}
 8005a72:	bf00      	nop
 8005a74:	bf00      	nop
 8005a76:	e7fd      	b.n	8005a74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	1ad2      	subs	r2, r2, r3
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a8a:	69b8      	ldr	r0, [r7, #24]
 8005a8c:	f000 f90a 	bl	8005ca4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a90:	4b1d      	ldr	r3, [pc, #116]	@ (8005b08 <pvPortMalloc+0x18c>)
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005b08 <pvPortMalloc+0x18c>)
 8005a9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b08 <pvPortMalloc+0x18c>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b10 <pvPortMalloc+0x194>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d203      	bcs.n	8005ab2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005aaa:	4b17      	ldr	r3, [pc, #92]	@ (8005b08 <pvPortMalloc+0x18c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a18      	ldr	r2, [pc, #96]	@ (8005b10 <pvPortMalloc+0x194>)
 8005ab0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	4b13      	ldr	r3, [pc, #76]	@ (8005b04 <pvPortMalloc+0x188>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ac6:	4b13      	ldr	r3, [pc, #76]	@ (8005b14 <pvPortMalloc+0x198>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3301      	adds	r3, #1
 8005acc:	4a11      	ldr	r2, [pc, #68]	@ (8005b14 <pvPortMalloc+0x198>)
 8005ace:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ad0:	f7fe fcec 	bl	80044ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00b      	beq.n	8005af6 <pvPortMalloc+0x17a>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	60fb      	str	r3, [r7, #12]
}
 8005af0:	bf00      	nop
 8005af2:	bf00      	nop
 8005af4:	e7fd      	b.n	8005af2 <pvPortMalloc+0x176>
	return pvReturn;
 8005af6:	69fb      	ldr	r3, [r7, #28]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3728      	adds	r7, #40	@ 0x28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	200019f8 	.word	0x200019f8
 8005b04:	20001a0c 	.word	0x20001a0c
 8005b08:	200019fc 	.word	0x200019fc
 8005b0c:	200019f0 	.word	0x200019f0
 8005b10:	20001a00 	.word	0x20001a00
 8005b14:	20001a04 	.word	0x20001a04

08005b18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d04f      	beq.n	8005bca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b2a:	2308      	movs	r3, #8
 8005b2c:	425b      	negs	r3, r3
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4413      	add	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	4b25      	ldr	r3, [pc, #148]	@ (8005bd4 <vPortFree+0xbc>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4013      	ands	r3, r2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10b      	bne.n	8005b5e <vPortFree+0x46>
	__asm volatile
 8005b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4a:	f383 8811 	msr	BASEPRI, r3
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	f3bf 8f4f 	dsb	sy
 8005b56:	60fb      	str	r3, [r7, #12]
}
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
 8005b5c:	e7fd      	b.n	8005b5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <vPortFree+0x66>
	__asm volatile
 8005b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	60bb      	str	r3, [r7, #8]
}
 8005b78:	bf00      	nop
 8005b7a:	bf00      	nop
 8005b7c:	e7fd      	b.n	8005b7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	4b14      	ldr	r3, [pc, #80]	@ (8005bd4 <vPortFree+0xbc>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4013      	ands	r3, r2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01e      	beq.n	8005bca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d11a      	bne.n	8005bca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd4 <vPortFree+0xbc>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	401a      	ands	r2, r3
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ba4:	f7fe fc74 	bl	8004490 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd8 <vPortFree+0xc0>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	4a09      	ldr	r2, [pc, #36]	@ (8005bd8 <vPortFree+0xc0>)
 8005bb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005bb6:	6938      	ldr	r0, [r7, #16]
 8005bb8:	f000 f874 	bl	8005ca4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005bbc:	4b07      	ldr	r3, [pc, #28]	@ (8005bdc <vPortFree+0xc4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	4a06      	ldr	r2, [pc, #24]	@ (8005bdc <vPortFree+0xc4>)
 8005bc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005bc6:	f7fe fc71 	bl	80044ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005bca:	bf00      	nop
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20001a0c 	.word	0x20001a0c
 8005bd8:	200019fc 	.word	0x200019fc
 8005bdc:	20001a08 	.word	0x20001a08

08005be0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005be6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005bea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005bec:	4b27      	ldr	r3, [pc, #156]	@ (8005c8c <prvHeapInit+0xac>)
 8005bee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00c      	beq.n	8005c14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3307      	adds	r3, #7
 8005bfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0307 	bic.w	r3, r3, #7
 8005c06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8005c8c <prvHeapInit+0xac>)
 8005c10:	4413      	add	r3, r2
 8005c12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c18:	4a1d      	ldr	r2, [pc, #116]	@ (8005c90 <prvHeapInit+0xb0>)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8005c90 <prvHeapInit+0xb0>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	4413      	add	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c2c:	2208      	movs	r2, #8
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0307 	bic.w	r3, r3, #7
 8005c3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a15      	ldr	r2, [pc, #84]	@ (8005c94 <prvHeapInit+0xb4>)
 8005c40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c42:	4b14      	ldr	r3, [pc, #80]	@ (8005c94 <prvHeapInit+0xb4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2200      	movs	r2, #0
 8005c48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c4a:	4b12      	ldr	r3, [pc, #72]	@ (8005c94 <prvHeapInit+0xb4>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	1ad2      	subs	r2, r2, r3
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005c60:	4b0c      	ldr	r3, [pc, #48]	@ (8005c94 <prvHeapInit+0xb4>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8005c98 <prvHeapInit+0xb8>)
 8005c6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4a09      	ldr	r2, [pc, #36]	@ (8005c9c <prvHeapInit+0xbc>)
 8005c76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c78:	4b09      	ldr	r3, [pc, #36]	@ (8005ca0 <prvHeapInit+0xc0>)
 8005c7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005c7e:	601a      	str	r2, [r3, #0]
}
 8005c80:	bf00      	nop
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	20000e38 	.word	0x20000e38
 8005c90:	200019f0 	.word	0x200019f0
 8005c94:	200019f8 	.word	0x200019f8
 8005c98:	20001a00 	.word	0x20001a00
 8005c9c:	200019fc 	.word	0x200019fc
 8005ca0:	20001a0c 	.word	0x20001a0c

08005ca4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cac:	4b28      	ldr	r3, [pc, #160]	@ (8005d50 <prvInsertBlockIntoFreeList+0xac>)
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e002      	b.n	8005cb8 <prvInsertBlockIntoFreeList+0x14>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d8f7      	bhi.n	8005cb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	4413      	add	r3, r2
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d108      	bne.n	8005ce6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	441a      	add	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	441a      	add	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d118      	bne.n	8005d2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b15      	ldr	r3, [pc, #84]	@ (8005d54 <prvInsertBlockIntoFreeList+0xb0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d00d      	beq.n	8005d22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	441a      	add	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e008      	b.n	8005d34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d22:	4b0c      	ldr	r3, [pc, #48]	@ (8005d54 <prvInsertBlockIntoFreeList+0xb0>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	e003      	b.n	8005d34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d002      	beq.n	8005d42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d42:	bf00      	nop
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	200019f0 	.word	0x200019f0
 8005d54:	200019f8 	.word	0x200019f8

08005d58 <memset>:
 8005d58:	4402      	add	r2, r0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d100      	bne.n	8005d62 <memset+0xa>
 8005d60:	4770      	bx	lr
 8005d62:	f803 1b01 	strb.w	r1, [r3], #1
 8005d66:	e7f9      	b.n	8005d5c <memset+0x4>

08005d68 <__libc_init_array>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	4d0d      	ldr	r5, [pc, #52]	@ (8005da0 <__libc_init_array+0x38>)
 8005d6c:	4c0d      	ldr	r4, [pc, #52]	@ (8005da4 <__libc_init_array+0x3c>)
 8005d6e:	1b64      	subs	r4, r4, r5
 8005d70:	10a4      	asrs	r4, r4, #2
 8005d72:	2600      	movs	r6, #0
 8005d74:	42a6      	cmp	r6, r4
 8005d76:	d109      	bne.n	8005d8c <__libc_init_array+0x24>
 8005d78:	4d0b      	ldr	r5, [pc, #44]	@ (8005da8 <__libc_init_array+0x40>)
 8005d7a:	4c0c      	ldr	r4, [pc, #48]	@ (8005dac <__libc_init_array+0x44>)
 8005d7c:	f000 f826 	bl	8005dcc <_init>
 8005d80:	1b64      	subs	r4, r4, r5
 8005d82:	10a4      	asrs	r4, r4, #2
 8005d84:	2600      	movs	r6, #0
 8005d86:	42a6      	cmp	r6, r4
 8005d88:	d105      	bne.n	8005d96 <__libc_init_array+0x2e>
 8005d8a:	bd70      	pop	{r4, r5, r6, pc}
 8005d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d90:	4798      	blx	r3
 8005d92:	3601      	adds	r6, #1
 8005d94:	e7ee      	b.n	8005d74 <__libc_init_array+0xc>
 8005d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d9a:	4798      	blx	r3
 8005d9c:	3601      	adds	r6, #1
 8005d9e:	e7f2      	b.n	8005d86 <__libc_init_array+0x1e>
 8005da0:	08005e7c 	.word	0x08005e7c
 8005da4:	08005e7c 	.word	0x08005e7c
 8005da8:	08005e7c 	.word	0x08005e7c
 8005dac:	08005e80 	.word	0x08005e80

08005db0 <memcpy>:
 8005db0:	440a      	add	r2, r1
 8005db2:	4291      	cmp	r1, r2
 8005db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005db8:	d100      	bne.n	8005dbc <memcpy+0xc>
 8005dba:	4770      	bx	lr
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dc6:	4291      	cmp	r1, r2
 8005dc8:	d1f9      	bne.n	8005dbe <memcpy+0xe>
 8005dca:	bd10      	pop	{r4, pc}

08005dcc <_init>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr

08005dd8 <_fini>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	bf00      	nop
 8005ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dde:	bc08      	pop	{r3}
 8005de0:	469e      	mov	lr, r3
 8005de2:	4770      	bx	lr
